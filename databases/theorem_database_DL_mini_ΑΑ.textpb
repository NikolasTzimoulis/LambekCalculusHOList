theorems { 
	fingerprint: 999999999   
	conclusion: "(a (c (fun (fun (recspace (num)) (bool)) (bool)) ?) (l (v (recspace (num)) a) (a (c (fun (fun (fun (recspace (num)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (num)) (bool)) string') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (recspace (num)) (bool)) (bool)) !) (l (v (recspace (num)) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (num) (bool)) (bool)) ?) (l (v (num) a) (a (a (c (fun (recspace (num)) (fun (recspace (num)) (bool))) =) (v (recspace (num)) a)) (a (l (v (num) a) (a (a (a (c (fun (num) (fun (num) (fun (fun (num) (recspace (num))) (recspace (num))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (num) a)) (l (v (num) n) (c (recspace (num)) BOTTOM)))) (v (num) a)))))) (a (v (fun (recspace (num)) (bool)) string') (v (recspace (num)) a)))))) (a (v (fun (recspace (num)) (bool)) string') (v (recspace (num)) a)))))))" 
	tag: THEOREM 
	training_split: TRAINING
    library_tag: "c-DL.ml"
	pretty_printed: "|- ?a. !string'. (!a. (?a. a = (\\a. CONSTR 0 a (\\n. BOTTOM)) a) ==> string' a)\n                 ==> string' a"
	proof_function: "type_definition_helper"
}
theorems {
	pretty_printed: "|- (!a. _mk_string (_dest_string a) = a) /\\\n   (!r. (!string'. (!a. (?a. a = (\\a. CONSTR 0 a (\\n. BOTTOM)) a)\n                        ==> string' a)\n                   ==> string' r) <=>\n        _dest_string (_mk_string r) = r)"
	fingerprint: 999999999
	conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (string) (bool)) (bool)) !) (l (v (string) a) (a (a (c (fun (string) (fun (string) (bool))) =) (a (c (fun (recspace (num)) (string)) _mk_string) (a (c (fun (string) (recspace (num))) _dest_string) (v (string) a)))) (v (string) a))))) (a (c (fun (fun (recspace (num)) (bool)) (bool)) !) (l (v (recspace (num)) r) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (fun (fun (recspace (num)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (num)) (bool)) string') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (recspace (num)) (bool)) (bool)) !) (l (v (recspace (num)) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (num) (bool)) (bool)) ?) (l (v (num) a) (a (a (c (fun (recspace (num)) (fun (recspace (num)) (bool))) =) (v (recspace (num)) a)) (a (l (v (num) a) (a (a (a (c (fun (num) (fun (num) (fun (fun (num) (recspace (num))) (recspace (num))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (num) a)) (l (v (num) n) (c (recspace (num)) BOTTOM)))) (v (num) a)))))) (a (v (fun (recspace (num)) (bool)) string') (v (recspace (num)) a)))))) (a (v (fun (recspace (num)) (bool)) string') (v (recspace (num)) r)))))) (a (a (c (fun (recspace (num)) (fun (recspace (num)) (bool))) =) (a (c (fun (string) (recspace (num))) _dest_string) (a (c (fun (recspace (num)) (string)) _mk_string) (v (recspace (num)) r)))) (v (recspace (num)) r))))))"
	tag: TYPE_DEFINITION
	type_definition {
		type_name: "string"
		abs_name: "_mk_string"
		rep_name: "_dest_string"
		theorem_arg: 999999999 
	}
	library_tag: "c-DL.ml"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) form') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) a) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a')) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a)))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a))))))))))) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a')))))) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a)))))))" 
	tag: THEOREM 
	training_split: TRAINING
    library_tag: "c-DL.ml"
	pretty_printed: "|- ?a. !form'. (!a'. (?a. a' = (\\a. CONSTR 0 a (\\n. BOTTOM)) a) \\/\n                     (?a0 a1.\n                          a' =\n                          (\\a0 a1.\n                               CONSTR (SUC 0) (@v. T)\n                               (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                          a0\n                          a1 /\\\n                          form' a0 /\\\n                          form' a1) \\/\n                     (?a0 a1.\n                          a' =\n                          (\\a0 a1.\n                               CONSTR (SUC (SUC 0)) (@v. T)\n                               (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                          a0\n                          a1 /\\\n                          form' a0 /\\\n                          form' a1) \\/\n                     (?a0 a1.\n                          a' =\n                          (\\a0 a1.\n                               CONSTR (SUC (SUC (SUC 0))) (@v. T)\n                               (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                          a0\n                          a1 /\\\n                          form' a0 /\\\n                          form' a1) \\/\n                     (?a. a' =\n                          (\\a. CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)\n                               (FCONS a (\\n. BOTTOM)))\n                          a /\\\n                          form' a) \\/\n                     (?a. a' =\n                          (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) (@v. T)\n                               (FCONS a (\\n. BOTTOM)))\n                          a /\\\n                          form' a)\n                     ==> form' a')\n               ==> form' a" 
	proof_function: "type_definition_helper"
}
theorems {
	 pretty_printed: "|- (!a. _mk_form (_dest_form a) = a) /\\\n   (!r. (!form'. (!a'. (?a. a' = (\\a. CONSTR 0 a (\\n. BOTTOM)) a) \\/\n                       (?a0 a1.\n                            a' =\n                            (\\a0 a1.\n                                 CONSTR (SUC 0) (@v. T)\n                                 (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                            a0\n                            a1 /\\\n                            form' a0 /\\\n                            form' a1) \\/\n                       (?a0 a1.\n                            a' =\n                            (\\a0 a1.\n                                 CONSTR (SUC (SUC 0)) (@v. T)\n                                 (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                            a0\n                            a1 /\\\n                            form' a0 /\\\n                            form' a1) \\/\n                       (?a0 a1.\n                            a' =\n                            (\\a0 a1.\n                                 CONSTR (SUC (SUC (SUC 0))) (@v. T)\n                                 (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                            a0\n                            a1 /\\\n                            form' a0 /\\\n                            form' a1) \\/\n                       (?a. a' =\n                            (\\a. CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)\n                                 (FCONS a (\\n. BOTTOM)))\n                            a /\\\n                            form' a) \\/\n                       (?a. a' =\n                            (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC 0)))))\n                                 (@v. T)\n                                 (FCONS a (\\n. BOTTOM)))\n                            a /\\\n                            form' a)\n                       ==> form' a')\n                 ==> form' r) <=>\n        _dest_form (_mk_form r) = r)" 
     fingerprint: 999999999   
     conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a) (a (a (c (fun (form) (fun (form) (bool))) =) (a (c (fun (recspace (list (char))) (form)) _mk_form) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a)))) (v (form) a))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) r) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) form') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) a) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a')) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a)))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a))))))))))) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) a')))))) (a (v (fun (recspace (list (char))) (bool)) form') (v (recspace (list (char))) r)))))) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (a (c (fun (form) (recspace (list (char)))) _dest_form) (a (c (fun (recspace (list (char))) (form)) _mk_form) (v (recspace (list (char))) r)))) (v (recspace (list (char))) r))))))" 
     tag: TYPE_DEFINITION 
     type_definition { 
		type_name: "form" 
		abs_name: "_mk_form" 
		rep_name: "_dest_form" 
		theorem_arg: 999999999 
	}
	library_tag: "c-DL.ml"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a) (a (c (fun (fun (fun (recspace (form)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (form)) (bool)) strF') (a (c (fun (fun (fun (recspace (form)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (form)) (bool)) strG') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (form)) (bool)) (bool)) !) (l (v (recspace (form)) a0') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) a) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a0')) (a (l (v (form) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (form) a)) (l (v (num) n) (c (recspace (form)) BOTTOM)))) (v (form) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a0')) (a (l (v (recspace (form)) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a)) (l (v (num) n) (c (recspace (form)) BOTTOM))))) (v (recspace (form)) a)))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a)))))) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a0) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a0')) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (v (recspace (form)) a0)) (v (recspace (form)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a0))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a1))))))))))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a0')))))) (a (c (fun (fun (recspace (form)) (bool)) (bool)) !) (l (v (recspace (form)) a1') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) a) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (l (v (form) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (v (form) a)) (l (v (num) n) (c (recspace (form)) BOTTOM)))) (v (form) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a0) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (v (recspace (form)) a0)) (v (recspace (form)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a0))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a0) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (v (recspace (form)) a0)) (v (recspace (form)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a0))) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a1))))))))) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (l (v (recspace (form)) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a)) (l (v (num) n) (c (recspace (form)) BOTTOM))))) (v (recspace (form)) a)))) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a))))))))) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a1'))))))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a)))))))))" 
	tag: THEOREM 
	training_split: TRAINING
    library_tag: "c-DL.ml"
	pretty_printed: "|- ?a. !strF' strG'.\n           (!a0'. (?a. a0' = (\\a. CONSTR 0 a (\\n. BOTTOM)) a) \\/\n                  (?a. a0' =\n                       (\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM))) a /\\\n                       strF' a) \\/\n                  (?a0 a1.\n                       a0' =\n                       (\\a0 a1.\n                            CONSTR (SUC (SUC 0)) (@v. T)\n                            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                       a0\n                       a1 /\\\n                       strF' a0 /\\\n                       strF' a1)\n                  ==> strF' a0') /\\\n           (!a1'. (?a. a1' =\n                       (\\a. CONSTR (SUC (SUC (SUC 0))) a (\\n. BOTTOM)) a) \\/\n                  (?a0 a1.\n                       a1' =\n                       (\\a0 a1.\n                            CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)\n                            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                       a0\n                       a1 /\\\n                       strG' a0 /\\\n                       strF' a1) \\/\n                  (?a0 a1.\n                       a1' =\n                       (\\a0 a1.\n                            CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) (@v. T)\n                            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                       a0\n                       a1 /\\\n                       strF' a0 /\\\n                       strG' a1) \\/\n                  (?a. a1' =\n                       (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0))))))\n                            (@v. T)\n                            (FCONS a (\\n. BOTTOM)))\n                       a /\\\n                       strG' a)\n                  ==> strG' a1')\n           ==> strF' a"
	proof_function: "type_definition_helper"
}
theorems {
	pretty_printed: "|- (!a. _mk_strF (_dest_strF a) = a) /\\\n   (!r. (!strF' strG'.\n             (!a0'. (?a. a0' = (\\a. CONSTR 0 a (\\n. BOTTOM)) a) \\/\n                    (?a. a0' =\n                         (\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM)))\n                         a /\\\n                         strF' a) \\/\n                    (?a0 a1.\n                         a0' =\n                         (\\a0 a1.\n                              CONSTR (SUC (SUC 0)) (@v. T)\n                              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                         a0\n                         a1 /\\\n                         strF' a0 /\\\n                         strF' a1)\n                    ==> strF' a0') /\\\n             (!a1'. (?a. a1' =\n                         (\\a. CONSTR (SUC (SUC (SUC 0))) a (\\n. BOTTOM)) a) \\/\n                    (?a0 a1.\n                         a1' =\n                         (\\a0 a1.\n                              CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)\n                              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                         a0\n                         a1 /\\\n                         strG' a0 /\\\n                         strF' a1) \\/\n                    (?a0 a1.\n                         a1' =\n                         (\\a0 a1.\n                              CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) (@v. T)\n                              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                         a0\n                         a1 /\\\n                         strF' a0 /\\\n                         strG' a1) \\/\n                    (?a. a1' =\n                         (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0))))))\n                              (@v. T)\n                              (FCONS a (\\n. BOTTOM)))\n                         a /\\\n                         strG' a)\n                    ==> strG' a1')\n             ==> strF' r) <=>\n        _dest_strF (_mk_strF r) = r)"
	fingerprint: 999999999
	conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) a) (a (a (c (fun (strF) (fun (strF) (bool))) =) (a (c (fun (recspace (form)) (strF)) _mk_strF) (a (c (fun (strF) (recspace (form))) _dest_strF) (v (strF) a)))) (v (strF) a))))) (a (c (fun (fun (recspace (form)) (bool)) (bool)) !) (l (v (recspace (form)) r) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (fun (fun (recspace (form)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (form)) (bool)) strF') (a (c (fun (fun (fun (recspace (form)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (form)) (bool)) strG') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (form)) (bool)) (bool)) !) (l (v (recspace (form)) a0') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) a) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a0')) (a (l (v (form) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (form) a)) (l (v (num) n) (c (recspace (form)) BOTTOM)))) (v (form) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a0')) (a (l (v (recspace (form)) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a)) (l (v (num) n) (c (recspace (form)) BOTTOM))))) (v (recspace (form)) a)))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a)))))) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a0) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a0')) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (v (recspace (form)) a0)) (v (recspace (form)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a0))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a1))))))))))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a0')))))) (a (c (fun (fun (recspace (form)) (bool)) (bool)) !) (l (v (recspace (form)) a1') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) a) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (l (v (form) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (v (form) a)) (l (v (num) n) (c (recspace (form)) BOTTOM)))) (v (form) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a0) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (v (recspace (form)) a0)) (v (recspace (form)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a0))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a0) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (v (recspace (form)) a0)) (v (recspace (form)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a0))) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a1))))))))) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (l (v (recspace (form)) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a)) (l (v (num) n) (c (recspace (form)) BOTTOM))))) (v (recspace (form)) a)))) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a))))))))) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a1'))))))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) r)))))))) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (a (c (fun (strF) (recspace (form))) _dest_strF) (a (c (fun (recspace (form)) (strF)) _mk_strF) (v (recspace (form)) r)))) (v (recspace (form)) r))))))"
	tag: TYPE_DEFINITION
	type_definition {
		type_name: "strF"
		abs_name: "_mk_strF"
		rep_name: "_dest_strF"
		theorem_arg: 999999999 
	}
	library_tag: "c-DL.ml"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a) (a (c (fun (fun (fun (recspace (form)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (form)) (bool)) strF') (a (c (fun (fun (fun (recspace (form)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (form)) (bool)) strG') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (form)) (bool)) (bool)) !) (l (v (recspace (form)) a0') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) a) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a0')) (a (l (v (form) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (form) a)) (l (v (num) n) (c (recspace (form)) BOTTOM)))) (v (form) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a0')) (a (l (v (recspace (form)) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a)) (l (v (num) n) (c (recspace (form)) BOTTOM))))) (v (recspace (form)) a)))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a)))))) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a0) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a0')) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (v (recspace (form)) a0)) (v (recspace (form)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a0))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a1))))))))))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a0')))))) (a (c (fun (fun (recspace (form)) (bool)) (bool)) !) (l (v (recspace (form)) a1') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) a) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (l (v (form) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (v (form) a)) (l (v (num) n) (c (recspace (form)) BOTTOM)))) (v (form) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a0) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (v (recspace (form)) a0)) (v (recspace (form)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a0))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a0) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (v (recspace (form)) a0)) (v (recspace (form)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a0))) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a1))))))))) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (l (v (recspace (form)) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a)) (l (v (num) n) (c (recspace (form)) BOTTOM))))) (v (recspace (form)) a)))) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a))))))))) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a1'))))))) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a)))))))))" 
	tag: THEOREM 
	training_split: TRAINING
    library_tag: "c-DL.ml"
	pretty_printed: "|- ?a. !strF' strG'.\n           (!a0'. (?a. a0' = (\\a. CONSTR 0 a (\\n. BOTTOM)) a) \\/\n                  (?a. a0' =\n                       (\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM))) a /\\\n                       strF' a) \\/\n                  (?a0 a1.\n                       a0' =\n                       (\\a0 a1.\n                            CONSTR (SUC (SUC 0)) (@v. T)\n                            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                       a0\n                       a1 /\\\n                       strF' a0 /\\\n                       strF' a1)\n                  ==> strF' a0') /\\\n           (!a1'. (?a. a1' =\n                       (\\a. CONSTR (SUC (SUC (SUC 0))) a (\\n. BOTTOM)) a) \\/\n                  (?a0 a1.\n                       a1' =\n                       (\\a0 a1.\n                            CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)\n                            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                       a0\n                       a1 /\\\n                       strG' a0 /\\\n                       strF' a1) \\/\n                  (?a0 a1.\n                       a1' =\n                       (\\a0 a1.\n                            CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) (@v. T)\n                            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                       a0\n                       a1 /\\\n                       strF' a0 /\\\n                       strG' a1) \\/\n                  (?a. a1' =\n                       (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0))))))\n                            (@v. T)\n                            (FCONS a (\\n. BOTTOM)))\n                       a /\\\n                       strG' a)\n                  ==> strG' a1')\n           ==> strG' a"
	proof_function: "type_definition_helper"
}
theorems {
	pretty_printed: "|- (!a. _mk_strG (_dest_strG a) = a) /\\\n   (!r. (!strF' strG'.\n             (!a0'. (?a. a0' = (\\a. CONSTR 0 a (\\n. BOTTOM)) a) \\/\n                    (?a. a0' =\n                         (\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM)))\n                         a /\\\n                         strF' a) \\/\n                    (?a0 a1.\n                         a0' =\n                         (\\a0 a1.\n                              CONSTR (SUC (SUC 0)) (@v. T)\n                              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                         a0\n                         a1 /\\\n                         strF' a0 /\\\n                         strF' a1)\n                    ==> strF' a0') /\\\n             (!a1'. (?a. a1' =\n                         (\\a. CONSTR (SUC (SUC (SUC 0))) a (\\n. BOTTOM)) a) \\/\n                    (?a0 a1.\n                         a1' =\n                         (\\a0 a1.\n                              CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)\n                              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                         a0\n                         a1 /\\\n                         strG' a0 /\\\n                         strF' a1) \\/\n                    (?a0 a1.\n                         a1' =\n                         (\\a0 a1.\n                              CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) (@v. T)\n                              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n                         a0\n                         a1 /\\\n                         strF' a0 /\\\n                         strG' a1) \\/\n                    (?a. a1' =\n                         (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0))))))\n                              (@v. T)\n                              (FCONS a (\\n. BOTTOM)))\n                         a /\\\n                         strG' a)\n                    ==> strG' a1')\n             ==> strG' r) <=>\n        _dest_strG (_mk_strG r) = r)"
	fingerprint: 999999999
	conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) a) (a (a (c (fun (strG) (fun (strG) (bool))) =) (a (c (fun (recspace (form)) (strG)) _mk_strG) (a (c (fun (strG) (recspace (form))) _dest_strG) (v (strG) a)))) (v (strG) a))))) (a (c (fun (fun (recspace (form)) (bool)) (bool)) !) (l (v (recspace (form)) r) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (fun (fun (recspace (form)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (form)) (bool)) strF') (a (c (fun (fun (fun (recspace (form)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (form)) (bool)) strG') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (form)) (bool)) (bool)) !) (l (v (recspace (form)) a0') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) a) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a0')) (a (l (v (form) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (form) a)) (l (v (num) n) (c (recspace (form)) BOTTOM)))) (v (form) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a0')) (a (l (v (recspace (form)) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a)) (l (v (num) n) (c (recspace (form)) BOTTOM))))) (v (recspace (form)) a)))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a)))))) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a0) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a0')) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (v (recspace (form)) a0)) (v (recspace (form)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a0))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a1))))))))))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a0')))))) (a (c (fun (fun (recspace (form)) (bool)) (bool)) !) (l (v (recspace (form)) a1') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) a) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (l (v (form) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (v (form) a)) (l (v (num) n) (c (recspace (form)) BOTTOM)))) (v (form) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a0) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (v (recspace (form)) a0)) (v (recspace (form)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a0))) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a0) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (v (recspace (form)) a0)) (v (recspace (form)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (form)) (bool)) strF') (v (recspace (form)) a0))) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a1))))))))) (a (c (fun (fun (recspace (form)) (bool)) (bool)) ?) (l (v (recspace (form)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (v (recspace (form)) a1')) (a (l (v (recspace (form)) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a)) (l (v (num) n) (c (recspace (form)) BOTTOM))))) (v (recspace (form)) a)))) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a))))))))) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) a1'))))))) (a (v (fun (recspace (form)) (bool)) strG') (v (recspace (form)) r)))))))) (a (a (c (fun (recspace (form)) (fun (recspace (form)) (bool))) =) (a (c (fun (strG) (recspace (form))) _dest_strG) (a (c (fun (recspace (form)) (strG)) _mk_strG) (v (recspace (form)) r)))) (v (recspace (form)) r))))))"
	tag: TYPE_DEFINITION
	type_definition {
		type_name: "strG"
		abs_name: "_mk_strG"
		rep_name: "_dest_strG"
		theorem_arg: 999999999 
	}
	library_tag: "c-DL.ml"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (c (fun (fun (recspace (prod (strF) (strG))) (bool)) (bool)) ?) (l (v (recspace (prod (strF) (strG))) a) (a (c (fun (fun (fun (recspace (prod (strF) (strG))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (prod (strF) (strG))) (bool)) seq') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (recspace (prod (strF) (strG))) (bool)) (bool)) !) (l (v (recspace (prod (strF) (strG))) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) a0) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) a1) (a (a (c (fun (recspace (prod (strF) (strG))) (fun (recspace (prod (strF) (strG))) (bool))) =) (v (recspace (prod (strF) (strG))) a)) (a (a (l (v (strF) a0) (l (v (strG) a1) (a (a (a (c (fun (num) (fun (prod (strF) (strG)) (fun (fun (num) (recspace (prod (strF) (strG)))) (recspace (prod (strF) (strG)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (a (c (fun (strF) (fun (strG) (prod (strF) (strG)))) ,) (v (strF) a0)) (v (strG) a1))) (l (v (num) n) (c (recspace (prod (strF) (strG))) BOTTOM))))) (v (strF) a0)) (v (strG) a1)))))))) (a (v (fun (recspace (prod (strF) (strG))) (bool)) seq') (v (recspace (prod (strF) (strG))) a)))))) (a (v (fun (recspace (prod (strF) (strG))) (bool)) seq') (v (recspace (prod (strF) (strG))) a)))))))" 
	tag: THEOREM 
	training_split: TRAINING
    library_tag: "c-DL.ml"
	pretty_printed: "|- ?a. !seq'. (!a. (?a0 a1.\n                        a = (\\a0 a1. CONSTR 0 (a0,a1) (\\n. BOTTOM)) a0 a1)\n                   ==> seq' a)\n              ==> seq' a"
	proof_function: "type_definition_helper"
}
theorems {
	pretty_printed: "|- (!a. _mk_seq (_dest_seq a) = a) /\\\n   (!r. (!seq'. (!a. (?a0 a1.\n                          a = (\\a0 a1. CONSTR 0 (a0,a1) (\\n. BOTTOM)) a0 a1)\n                     ==> seq' a)\n                ==> seq' r) <=>\n        _dest_seq (_mk_seq r) = r)"
	fingerprint: 999999999
	conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (seq) (bool)) (bool)) !) (l (v (seq) a) (a (a (c (fun (seq) (fun (seq) (bool))) =) (a (c (fun (recspace (prod (strF) (strG))) (seq)) _mk_seq) (a (c (fun (seq) (recspace (prod (strF) (strG)))) _dest_seq) (v (seq) a)))) (v (seq) a))))) (a (c (fun (fun (recspace (prod (strF) (strG))) (bool)) (bool)) !) (l (v (recspace (prod (strF) (strG))) r) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (fun (fun (recspace (prod (strF) (strG))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (prod (strF) (strG))) (bool)) seq') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (recspace (prod (strF) (strG))) (bool)) (bool)) !) (l (v (recspace (prod (strF) (strG))) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) a0) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) a1) (a (a (c (fun (recspace (prod (strF) (strG))) (fun (recspace (prod (strF) (strG))) (bool))) =) (v (recspace (prod (strF) (strG))) a)) (a (a (l (v (strF) a0) (l (v (strG) a1) (a (a (a (c (fun (num) (fun (prod (strF) (strG)) (fun (fun (num) (recspace (prod (strF) (strG)))) (recspace (prod (strF) (strG)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (a (c (fun (strF) (fun (strG) (prod (strF) (strG)))) ,) (v (strF) a0)) (v (strG) a1))) (l (v (num) n) (c (recspace (prod (strF) (strG))) BOTTOM))))) (v (strF) a0)) (v (strG) a1)))))))) (a (v (fun (recspace (prod (strF) (strG))) (bool)) seq') (v (recspace (prod (strF) (strG))) a)))))) (a (v (fun (recspace (prod (strF) (strG))) (bool)) seq') (v (recspace (prod (strF) (strG))) r)))))) (a (a (c (fun (recspace (prod (strF) (strG))) (fun (recspace (prod (strF) (strG))) (bool))) =) (a (c (fun (seq) (recspace (prod (strF) (strG)))) _dest_seq) (a (c (fun (recspace (prod (strF) (strG))) (seq)) _mk_seq) (v (recspace (prod (strF) (strG))) r)))) (v (recspace (prod (strF) (strG))) r))))))"
	tag: TYPE_DEFINITION
	type_definition {
		type_name: "seq"
		abs_name: "_mk_seq"
		rep_name: "_dest_seq"
		theorem_arg: 999999999 
	}
	library_tag: "c-DL.ml"
}










theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (num) (string)) (fun (fun (num) (string)) (bool))) =) (c (fun (num) (string)) String)) (l (v (num) a) (a (c (fun (recspace (num)) (string)) _mk_string) (a (l (v (num) a) (a (a (a (c (fun (num) (fun (num) (fun (fun (num) (recspace (num))) (recspace (num))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (num) a)) (l (v (num) n) (c (recspace (num)) BOTTOM)))) (v (num) a)))))"
	tag: DEFINITION 
	definition {
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (num) (string)) (fun (fun (num) (string)) (bool))) =) (v (fun (num) (string)) String)) (l (v (num) a) (a (c (fun (recspace (num)) (string)) _mk_string) (a (l (v (num) a) (a (a (a (c (fun (num) (fun (num) (fun (fun (num) (recspace (num))) (recspace (num))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (num) a)) (l (v (num) n) (c (recspace (num)) BOTTOM)))) (v (num) a)))))" 
		constants: "String"
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- String = (\\a. _mk_string ((\\a. CONSTR 0 a (\\n. BOTTOM)) a))"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (list (char)) (form)) (fun (fun (list (char)) (form)) (bool))) =) (c (fun (list (char)) (form)) Atom)) (l (v (list (char)) a) (a (c (fun (recspace (list (char))) (form)) _mk_form) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))" 
	tag: DEFINITION 
	definition { 
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (list (char)) (form)) (fun (fun (list (char)) (form)) (bool))) =) (v (fun (list (char)) (form)) Atom)) (l (v (list (char)) a) (a (c (fun (recspace (list (char))) (form)) _mk_form) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))" 
		constants: "Atom"
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- Atom = (\\a. _mk_form ((\\a. CONSTR 0 a (\\n. BOTTOM)) a))"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (form) (fun (form) (form))) (fun (fun (form) (fun (form) (form))) (bool))) =) (c (fun (form) (fun (form) (form))) /.)) (l (v (form) a0) (l (v (form) a1) (a (c (fun (recspace (list (char))) (form)) _mk_form) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a0))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a1)))))))" 
	tag: DEFINITION 
	definition { 
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (form) (fun (form) (form))) (fun (fun (form) (fun (form) (form))) (bool))) =) (v (fun (form) (fun (form) (form))) /.)) (l (v (form) a0) (l (v (form) a1) (a (c (fun (recspace (list (char))) (form)) _mk_form) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a0))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a1)))))))" 
		constants: "/."
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- /. =\n   (\\a0 a1.\n        _mk_form\n        ((\\a0 a1. CONSTR (SUC 0) (@v. T) (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_form a0)\n        (_dest_form a1)))"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (form) (fun (form) (form))) (fun (fun (form) (fun (form) (form))) (bool))) =) (c (fun (form) (fun (form) (form))) **)) (l (v (form) a0) (l (v (form) a1) (a (c (fun (recspace (list (char))) (form)) _mk_form) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a0))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a1)))))))" 
	tag: DEFINITION 
	definition { 
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (form) (fun (form) (form))) (fun (fun (form) (fun (form) (form))) (bool))) =) (v (fun (form) (fun (form) (form))) **)) (l (v (form) a0) (l (v (form) a1) (a (c (fun (recspace (list (char))) (form)) _mk_form) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a0))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a1)))))))" 
		constants: "**"
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- (**) =\n   (\\a0 a1.\n        _mk_form\n        ((\\a0 a1.\n              CONSTR (SUC (SUC 0)) (@v. T) (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_form a0)\n        (_dest_form a1)))"
}
  
theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (form) (fun (form) (form))) (fun (fun (form) (fun (form) (form))) (bool))) =) (c (fun (form) (fun (form) (form))) \\.)) (l (v (form) a0) (l (v (form) a1) (a (c (fun (recspace (list (char))) (form)) _mk_form) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a0))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a1)))))))" 
	tag: DEFINITION 
	definition { 
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (form) (fun (form) (form))) (fun (fun (form) (fun (form) (form))) (bool))) =) (v (fun (form) (fun (form) (form))) \\.)) (l (v (form) a0) (l (v (form) a1) (a (c (fun (recspace (list (char))) (form)) _mk_form) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a0))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a1)))))))" 
		constants: "\\."
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- \\. =\n   (\\a0 a1.\n        _mk_form\n        ((\\a0 a1.\n              CONSTR (SUC (SUC (SUC 0))) (@v. T)\n              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_form a0)\n        (_dest_form a1)))"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (form) (form)) (fun (fun (form) (form)) (bool))) =) (c (fun (form) (form)) <>)) (l (v (form) a) (a (c (fun (recspace (list (char))) (form)) _mk_form) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a))))))" 
	tag: DEFINITION 
	definition { 
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (form) (form)) (fun (fun (form) (form)) (bool))) =) (v (fun (form) (form)) <>)) (l (v (form) a) (a (c (fun (recspace (list (char))) (form)) _mk_form) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a))))))" 
		constants: "<>"
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- <> =\n   (\\a. _mk_form\n        ((\\a. CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T) (FCONS a (\\n. BOTTOM)))\n        (_dest_form a)))"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (form) (form)) (fun (fun (form) (form)) (bool))) =) (c (fun (form) (form)) ||)) (l (v (form) a) (a (c (fun (recspace (list (char))) (form)) _mk_form) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a))))))" 
	tag: DEFINITION 
	definition { 
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (form) (form)) (fun (fun (form) (form)) (bool))) =) (v (fun (form) (form)) ||)) (l (v (form) a) (a (c (fun (recspace (list (char))) (form)) _mk_form) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (a (c (fun (form) (recspace (list (char)))) _dest_form) (v (form) a))))))" 
		constants: "||"
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- || =\n   (\\a. _mk_form\n        ((\\a. CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) (@v. T)\n              (FCONS a (\\n. BOTTOM)))\n        (_dest_form a)))"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (form) (strF)) (fun (fun (form) (strF)) (bool))) =) (c (fun (form) (strF)) ff)) (l (v (form) a) (a (c (fun (recspace (form)) (strF)) _mk_strF) (a (l (v (form) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (form) a)) (l (v (num) n) (c (recspace (form)) BOTTOM)))) (v (form) a)))))"
	tag: DEFINITION 
	definition {
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (form) (strF)) (fun (fun (form) (strF)) (bool))) =) (v (fun (form) (strF)) ff)) (l (v (form) a) (a (c (fun (recspace (form)) (strF)) _mk_strF) (a (l (v (form) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (form) a)) (l (v (num) n) (c (recspace (form)) BOTTOM)))) (v (form) a)))))" 
		constants: "ff"
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- ff = (\\a. _mk_strF ((\\a. CONSTR 0 a (\\n. BOTTOM)) a))"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (strF) (strF)) (fun (fun (strF) (strF)) (bool))) =) (c (fun (strF) (strF)) <>^)) (l (v (strF) a) (a (c (fun (recspace (form)) (strF)) _mk_strF) (a (l (v (recspace (form)) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a)) (l (v (num) n) (c (recspace (form)) BOTTOM))))) (a (c (fun (strF) (recspace (form))) _dest_strF) (v (strF) a))))))"
	tag: DEFINITION 
	definition {
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (strF) (strF)) (fun (fun (strF) (strF)) (bool))) =) (v (fun (strF) (strF)) <>^)) (l (v (strF) a) (a (c (fun (recspace (form)) (strF)) _mk_strF) (a (l (v (recspace (form)) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a)) (l (v (num) n) (c (recspace (form)) BOTTOM))))) (a (c (fun (strF) (recspace (form))) _dest_strF) (v (strF) a))))))" 
		constants: "<>^"
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- <>^ =\n   (\\a. _mk_strF\n        ((\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM))) (_dest_strF a)))"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (strF) (fun (strF) (strF))) (fun (fun (strF) (fun (strF) (strF))) (bool))) =) (c (fun (strF) (fun (strF) (strF))) **^)) (l (v (strF) a0) (l (v (strF) a1) (a (c (fun (recspace (form)) (strF)) _mk_strF) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (a (c (fun (strF) (recspace (form))) _dest_strF) (v (strF) a0))) (a (c (fun (strF) (recspace (form))) _dest_strF) (v (strF) a1)))))))"
	tag: DEFINITION 
	definition {
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (strF) (fun (strF) (strF))) (fun (fun (strF) (fun (strF) (strF))) (bool))) =) (v (fun (strF) (fun (strF) (strF))) **^)) (l (v (strF) a0) (l (v (strF) a1) (a (c (fun (recspace (form)) (strF)) _mk_strF) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (a (c (fun (strF) (recspace (form))) _dest_strF) (v (strF) a0))) (a (c (fun (strF) (recspace (form))) _dest_strF) (v (strF) a1)))))))" 
		constants: "**^"
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- **^ =\n   (\\a0 a1.\n        _mk_strF\n        ((\\a0 a1.\n              CONSTR (SUC (SUC 0)) (@v. T) (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_strF a0)\n        (_dest_strF a1)))"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (form) (strG)) (fun (fun (form) (strG)) (bool))) =) (c (fun (form) (strG)) gg)) (l (v (form) a) (a (c (fun (recspace (form)) (strG)) _mk_strG) (a (l (v (form) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (v (form) a)) (l (v (num) n) (c (recspace (form)) BOTTOM)))) (v (form) a)))))"
	tag: DEFINITION 
	definition {
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (form) (strG)) (fun (fun (form) (strG)) (bool))) =) (v (fun (form) (strG)) gg)) (l (v (form) a) (a (c (fun (recspace (form)) (strG)) _mk_strG) (a (l (v (form) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (v (form) a)) (l (v (num) n) (c (recspace (form)) BOTTOM)))) (v (form) a)))))" 
		constants: "gg"
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- gg = (\\a. _mk_strG ((\\a. CONSTR (SUC (SUC (SUC 0))) a (\\n. BOTTOM)) a))"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (strF) (fun (strG) (strG))) (fun (fun (strF) (fun (strG) (strG))) (bool))) =) (c (fun (strF) (fun (strG) (strG))) \\.^)) (l (v (strF) a0) (l (v (strG) a1) (a (c (fun (recspace (form)) (strG)) _mk_strG) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (a (c (fun (strF) (recspace (form))) _dest_strF) (v (strF) a0))) (a (c (fun (strG) (recspace (form))) _dest_strG) (v (strG) a1)))))))"
	tag: DEFINITION 
	definition {
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (strF) (fun (strG) (strG))) (fun (fun (strF) (fun (strG) (strG))) (bool))) =) (v (fun (strF) (fun (strG) (strG))) \\.^)) (l (v (strF) a0) (l (v (strG) a1) (a (c (fun (recspace (form)) (strG)) _mk_strG) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (a (c (fun (strF) (recspace (form))) _dest_strF) (v (strF) a0))) (a (c (fun (strG) (recspace (form))) _dest_strG) (v (strG) a1)))))))" 
		constants: "\\.^"
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- \\.^ =\n   (\\a0 a1.\n        _mk_strG\n        ((\\a0 a1.\n              CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) (@v. T)\n              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_strF a0)\n        (_dest_strG a1)))"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (strG) (fun (strF) (strG))) (fun (fun (strG) (fun (strF) (strG))) (bool))) =) (c (fun (strG) (fun (strF) (strG))) /.^)) (l (v (strG) a0) (l (v (strF) a1) (a (c (fun (recspace (form)) (strG)) _mk_strG) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (a (c (fun (strG) (recspace (form))) _dest_strG) (v (strG) a0))) (a (c (fun (strF) (recspace (form))) _dest_strF) (v (strF) a1)))))))"
	tag: DEFINITION 
	definition {
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (strG) (fun (strF) (strG))) (fun (fun (strG) (fun (strF) (strG))) (bool))) =) (v (fun (strG) (fun (strF) (strG))) /.^)) (l (v (strG) a0) (l (v (strF) a1) (a (c (fun (recspace (form)) (strG)) _mk_strG) (a (a (l (v (recspace (form)) a0) (l (v (recspace (form)) a1) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a0)) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a1)) (l (v (num) n) (c (recspace (form)) BOTTOM))))))) (a (c (fun (strG) (recspace (form))) _dest_strG) (v (strG) a0))) (a (c (fun (strF) (recspace (form))) _dest_strF) (v (strF) a1)))))))" 
		constants: "/.^"
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- /.^ =\n   (\\a0 a1.\n        _mk_strG\n        ((\\a0 a1.\n              CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)\n              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_strG a0)\n        (_dest_strF a1)))"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (strG) (strG)) (fun (fun (strG) (strG)) (bool))) =) (c (fun (strG) (strG)) ||^)) (l (v (strG) a) (a (c (fun (recspace (form)) (strG)) _mk_strG) (a (l (v (recspace (form)) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a)) (l (v (num) n) (c (recspace (form)) BOTTOM))))) (a (c (fun (strG) (recspace (form))) _dest_strG) (v (strG) a))))))"
	tag: DEFINITION 
	definition {
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (strG) (strG)) (fun (fun (strG) (strG)) (bool))) =) (v (fun (strG) (strG)) ||^)) (l (v (strG) a) (a (c (fun (recspace (form)) (strG)) _mk_strG) (a (l (v (recspace (form)) a) (a (a (a (c (fun (num) (fun (form) (fun (fun (num) (recspace (form))) (recspace (form))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (a (c (fun (fun (form) (bool)) (form)) @) (l (v (form) v) (c (bool) T)))) (a (a (c (fun (recspace (form)) (fun (fun (num) (recspace (form))) (fun (num) (recspace (form))))) FCONS) (v (recspace (form)) a)) (l (v (num) n) (c (recspace (form)) BOTTOM))))) (a (c (fun (strG) (recspace (form))) _dest_strG) (v (strG) a))))))" 
		constants: "||^"
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- ||^ =\n   (\\a. _mk_strG\n        ((\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0)))))) (@v. T)\n              (FCONS a (\\n. BOTTOM)))\n        (_dest_strG a)))"
}

theorems { 
	fingerprint: 999999999   
	conclusion: "(a (a (c (fun (fun (strF) (fun (strG) (seq))) (fun (fun (strF) (fun (strG) (seq))) (bool))) =) (c (fun (strF) (fun (strG) (seq))) -->)) (l (v (strF) a0) (l (v (strG) a1) (a (c (fun (recspace (prod (strF) (strG))) (seq)) _mk_seq) (a (a (l (v (strF) a0) (l (v (strG) a1) (a (a (a (c (fun (num) (fun (prod (strF) (strG)) (fun (fun (num) (recspace (prod (strF) (strG)))) (recspace (prod (strF) (strG)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (a (c (fun (strF) (fun (strG) (prod (strF) (strG)))) ,) (v (strF) a0)) (v (strG) a1))) (l (v (num) n) (c (recspace (prod (strF) (strG))) BOTTOM))))) (v (strF) a0)) (v (strG) a1))))))"
	tag: DEFINITION 
	definition {
		definition_type: "DRULE"  
		definition_term: "(a (a (c (fun (fun (strF) (fun (strG) (seq))) (fun (fun (strF) (fun (strG) (seq))) (bool))) =) (v (fun (strF) (fun (strG) (seq))) -->)) (l (v (strF) a0) (l (v (strG) a1) (a (c (fun (recspace (prod (strF) (strG))) (seq)) _mk_seq) (a (a (l (v (strF) a0) (l (v (strG) a1) (a (a (a (c (fun (num) (fun (prod (strF) (strG)) (fun (fun (num) (recspace (prod (strF) (strG)))) (recspace (prod (strF) (strG)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (a (c (fun (strF) (fun (strG) (prod (strF) (strG)))) ,) (v (strF) a0)) (v (strG) a1))) (l (v (num) n) (c (recspace (prod (strF) (strG))) BOTTOM))))) (v (strF) a0)) (v (strG) a1))))))" 
		constants: "-->"
	} 
	library_tag: "c-DL.ml"
	pretty_printed: "|- --> = (\\a0 a1. _mk_seq ((\\a0 a1. CONSTR 0 (a0,a1) (\\n. BOTTOM)) a0 a1))"
}









theorems {
  conclusion:  "(a (c (fun (fun (fun (string) (bool)) (bool)) (bool)) !) (l (v (fun (string) (bool)) P) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (num) (bool)) (bool)) !) (l (v (num) a) (a (v (fun (string) (bool)) P) (a (c (fun (num) (string)) String) (v (num) a)))))) (a (c (fun (fun (string) (bool)) (bool)) !) (l (v (string) x) (a (v (fun (string) (bool)) P) (v (string) x)))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|- !P. (!a. P (String a)) ==> (!x. P x)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (num) Z) (bool)) (bool)) !) (l (v (fun (num) Z) String') (a (c (fun (fun (fun (string) Z) (bool)) (bool)) ?) (l (v (fun (string) Z) fn) (a (c (fun (fun (num) (bool)) (bool)) !) (l (v (num) a) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (string) Z) fn) (a (c (fun (num) (string)) String) (v (num) a)))) (a (v (fun (num) Z) String') (v (num) a)))))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|- !String'. ?fn. !a. fn (String a) = String' a"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (form) (bool)) (bool)) (bool)) !) (l (v (fun (form) (bool)) P) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) a) (a (v (fun (form) (bool)) P) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a0) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (form) (bool)) P) (v (form) a0))) (a (v (fun (form) (bool)) P) (v (form) a1)))) (a (v (fun (form) (bool)) P) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) a0)) (v (form) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a0) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (form) (bool)) P) (v (form) a0))) (a (v (fun (form) (bool)) P) (v (form) a1)))) (a (v (fun (form) (bool)) P) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) a0)) (v (form) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a0) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (form) (bool)) P) (v (form) a0))) (a (v (fun (form) (bool)) P) (v (form) a1)))) (a (v (fun (form) (bool)) P) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) a0)) (v (form) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (form) (bool)) P) (v (form) a))) (a (v (fun (form) (bool)) P) (a (c (fun (form) (form)) <>) (v (form) a))))))) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (form) (bool)) P) (v (form) a))) (a (v (fun (form) (bool)) P) (a (c (fun (form) (form)) ||) (v (form) a)))))))))))) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) x) (a (v (fun (form) (bool)) P) (v (form) x)))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|- !P. (!a. P (Atom a)) /\ (!a0 a1. P a0 /\ P a1 ==> P (/. a0 a1)) /\ (!a0 a1. P a0 /\ P a1 ==> P (a0 ** a1)) /\ (!a0 a1. P a0 /\ P a1 ==> P (\. a0 a1)) /\ (!a. P a ==> P (<> a)) /\ (!a. P a ==> P (|| a)) ==> (!x. P x)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (list (char)) Z) (bool)) (bool)) !) (l (v (fun (list (char)) Z) f0) (a (c (fun (fun (fun (form) (fun (form) (fun Z (fun Z Z)))) (bool)) (bool)) !) (l (v (fun (form) (fun (form) (fun Z (fun Z Z)))) f1) (a (c (fun (fun (fun (form) (fun (form) (fun Z (fun Z Z)))) (bool)) (bool)) !) (l (v (fun (form) (fun (form) (fun Z (fun Z Z)))) f2) (a (c (fun (fun (fun (form) (fun (form) (fun Z (fun Z Z)))) (bool)) (bool)) !) (l (v (fun (form) (fun (form) (fun Z (fun Z Z)))) f3) (a (c (fun (fun (fun (form) (fun Z Z)) (bool)) (bool)) !) (l (v (fun (form) (fun Z Z)) f4) (a (c (fun (fun (fun (form) (fun Z Z)) (bool)) (bool)) !) (l (v (fun (form) (fun Z Z)) f5) (a (c (fun (fun (fun (form) Z) (bool)) (bool)) ?) (l (v (fun (form) Z) fn) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) a) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (form) Z) fn) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) a)))) (a (v (fun (list (char)) Z) f0) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a0) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a1) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (form) Z) fn) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) a0)) (v (form) a1)))) (a (a (a (a (v (fun (form) (fun (form) (fun Z (fun Z Z)))) f1) (v (form) a0)) (v (form) a1)) (a (v (fun (form) Z) fn) (v (form) a0))) (a (v (fun (form) Z) fn) (v (form) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a0) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a1) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (form) Z) fn) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) a0)) (v (form) a1)))) (a (a (a (a (v (fun (form) (fun (form) (fun Z (fun Z Z)))) f2) (v (form) a0)) (v (form) a1)) (a (v (fun (form) Z) fn) (v (form) a0))) (a (v (fun (form) Z) fn) (v (form) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a0) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a1) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (form) Z) fn) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) a0)) (v (form) a1)))) (a (a (a (a (v (fun (form) (fun (form) (fun Z (fun Z Z)))) f3) (v (form) a0)) (v (form) a1)) (a (v (fun (form) Z) fn) (v (form) a0))) (a (v (fun (form) Z) fn) (v (form) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (form) Z) fn) (a (c (fun (form) (form)) <>) (v (form) a)))) (a (a (v (fun (form) (fun Z Z)) f4) (v (form) a)) (a (v (fun (form) Z) fn) (v (form) a))))))) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (form) Z) fn) (a (c (fun (form) (form)) ||) (v (form) a)))) (a (a (v (fun (form) (fun Z Z)) f5) (v (form) a)) (a (v (fun (form) Z) fn) (v (form) a)))))))))))))))))))))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|- !f0 f1 f2 f3 f4 f5. ?fn. (!a. fn (Atom a) = f0 a) /\ (!a0 a1. fn (/. a0 a1) = f1 a0 a1 (fn a0) (fn a1)) /\ (!a0 a1. fn (a0 ** a1) = f2 a0 a1 (fn a0) (fn a1)) /\ (!a0 a1. fn (\. a0 a1) = f3 a0 a1 (fn a0) (fn a1)) /\ (!a. fn (<> a) = f4 a (fn a)) /\ (!a. fn (|| a) = f5 a (fn a))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (strF) (bool)) (bool)) (bool)) !) (l (v (fun (strF) (bool)) P0) (a (c (fun (fun (fun (strG) (bool)) (bool)) (bool)) !) (l (v (fun (strG) (bool)) P1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a) (a (v (fun (strF) (bool)) P0) (a (c (fun (form) (strF)) ff) (v (form) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (strF) (bool)) P0) (v (strF) a))) (a (v (fun (strF) (bool)) P0) (a (c (fun (strF) (strF)) <>^) (v (strF) a))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) a0) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (strF) (bool)) P0) (v (strF) a0))) (a (v (fun (strF) (bool)) P0) (v (strF) a1)))) (a (v (fun (strF) (bool)) P0) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) a0)) (v (strF) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a) (a (v (fun (strG) (bool)) P1) (a (c (fun (form) (strG)) gg) (v (form) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) a0) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (strG) (bool)) P1) (v (strG) a0))) (a (v (fun (strF) (bool)) P0) (v (strF) a1)))) (a (v (fun (strG) (bool)) P1) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) a0)) (v (strF) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) a0) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (strF) (bool)) P0) (v (strF) a0))) (a (v (fun (strG) (bool)) P1) (v (strG) a1)))) (a (v (fun (strG) (bool)) P1) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) a0)) (v (strG) a1))))))))) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (strG) (bool)) P1) (v (strG) a))) (a (v (fun (strG) (bool)) P1) (a (c (fun (strG) (strG)) ||^) (v (strG) a))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) x0) (a (v (fun (strF) (bool)) P0) (v (strF) x0))))) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) x1) (a (v (fun (strG) (bool)) P1) (v (strG) x1))))))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|- !P0 P1. (!a. P0 (ff a)) /\ (!a. P0 a ==> P0 (<>^ a)) /\ (!a0 a1. P0 a0 /\ P0 a1 ==> P0 (**^ a0 a1)) /\ (!a. P1 (gg a)) /\ (!a0 a1. P1 a0 /\ P0 a1 ==> P1 (/.^ a0 a1)) /\ (!a0 a1. P0 a0 /\ P1 a1 ==> P1 (\.^ a0 a1)) /\ (!a. P1 a ==> P1 (||^ a))         ==> (!x0. P0 x0) /\ (!x1. P1 x1)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (form) Z) (bool)) (bool)) !) (l (v (fun (form) Z) ff') (a (c (fun (fun (fun (strF) (fun Z Z)) (bool)) (bool)) !) (l (v (fun (strF) (fun Z Z)) <>^') (a (c (fun (fun (fun (strF) (fun (strF) (fun Z (fun Z Z)))) (bool)) (bool)) !) (l (v (fun (strF) (fun (strF) (fun Z (fun Z Z)))) **^') (a (c (fun (fun (fun (form) Z) (bool)) (bool)) !) (l (v (fun (form) Z) gg') (a (c (fun (fun (fun (strG) (fun (strF) (fun Z (fun Z Z)))) (bool)) (bool)) !) (l (v (fun (strG) (fun (strF) (fun Z (fun Z Z)))) /.^') (a (c (fun (fun (fun (strF) (fun (strG) (fun Z (fun Z Z)))) (bool)) (bool)) !) (l (v (fun (strF) (fun (strG) (fun Z (fun Z Z)))) \\.^') (a (c (fun (fun (fun (strG) (fun Z Z)) (bool)) (bool)) !) (l (v (fun (strG) (fun Z Z)) ||^') (a (c (fun (fun (fun (strF) Z) (bool)) (bool)) ?) (l (v (fun (strF) Z) fn0) (a (c (fun (fun (fun (strG) Z) (bool)) (bool)) ?) (l (v (fun (strG) Z) fn1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (strF) Z) fn0) (a (c (fun (form) (strF)) ff) (v (form) a)))) (a (v (fun (form) Z) ff') (v (form) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) a) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (strF) Z) fn0) (a (c (fun (strF) (strF)) <>^) (v (strF) a)))) (a (a (v (fun (strF) (fun Z Z)) <>^') (v (strF) a)) (a (v (fun (strF) Z) fn0) (v (strF) a))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) a0) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) a1) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (strF) Z) fn0) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) a0)) (v (strF) a1)))) (a (a (a (a (v (fun (strF) (fun (strF) (fun Z (fun Z Z)))) **^') (v (strF) a0)) (v (strF) a1)) (a (v (fun (strF) Z) fn0) (v (strF) a0))) (a (v (fun (strF) Z) fn0) (v (strF) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) a) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (strG) Z) fn1) (a (c (fun (form) (strG)) gg) (v (form) a)))) (a (v (fun (form) Z) gg') (v (form) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) a0) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) a1) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (strG) Z) fn1) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) a0)) (v (strF) a1)))) (a (a (a (a (v (fun (strG) (fun (strF) (fun Z (fun Z Z)))) /.^') (v (strG) a0)) (v (strF) a1)) (a (v (fun (strG) Z) fn1) (v (strG) a0))) (a (v (fun (strF) Z) fn0) (v (strF) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) a0) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) a1) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (strG) Z) fn1) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) a0)) (v (strG) a1)))) (a (a (a (a (v (fun (strF) (fun (strG) (fun Z (fun Z Z)))) \\.^') (v (strF) a0)) (v (strG) a1)) (a (v (fun (strF) Z) fn0) (v (strF) a0))) (a (v (fun (strG) Z) fn1) (v (strG) a1))))))))) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) a) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (strG) Z) fn1) (a (c (fun (strG) (strG)) ||^) (v (strG) a)))) (a (a (v (fun (strG) (fun Z Z)) ||^') (v (strG) a)) (a (v (fun (strG) Z) fn1) (v (strG) a))))))))))))))))))))))))))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|- !ff' <>^' **^' gg' /.^' \.^' ||^'. ?fn0 fn1. (!a. fn0 (ff a) = ff' a) /\ (!a. fn0 (<>^ a) = <>^' a (fn0 a)) /\ (!a0 a1. fn0 (**^ a0 a1) = **^' a0 a1 (fn0 a0) (fn0 a1)) /\ (!a. fn1 (gg a) = gg' a) /\ (!a0 a1. fn1 (/.^ a0 a1) = /.^' a0 a1 (fn1 a0) (fn0 a1)) /\ (!a0 a1. fn1 (\.^ a0 a1) = \.^' a0 a1 (fn0 a0) (fn1 a1)) /\ (!a. fn1 (||^ a) = ||^' a (fn1 a))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (seq) (bool)) (bool)) (bool)) !) (l (v (fun (seq) (bool)) P) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) a0) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) a1) (a (v (fun (seq) (bool)) P) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) a0)) (v (strG) a1)))))))) (a (c (fun (fun (seq) (bool)) (bool)) !) (l (v (seq) x) (a (v (fun (seq) (bool)) P) (v (seq) x)))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|- !P. (!a0 a1. P (--> a0 a1)) ==> (!x. P x)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (strF) (fun (strG) Z)) (bool)) (bool)) !) (l (v (fun (strF) (fun (strG) Z)) -->') (a (c (fun (fun (fun (seq) Z) (bool)) (bool)) ?) (l (v (fun (seq) Z) fn) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) a0) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) a1) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (seq) Z) fn) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) a0)) (v (strG) a1)))) (a (a (v (fun (strF) (fun (strG) Z)) -->') (v (strF) a0)) (v (strG) a1)))))))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|- !-->'. ?fn. !a0 a1. fn (--> a0 a1) = -->' a0 a1"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}









theorems {
  conclusion:  "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) p) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) p)))) (a (c (fun (form) (strG)) gg) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) p)))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) A))) (v (strG) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (v (strG) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Z))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Z)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Z)) (v (strF) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Z)) (v (strF) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (v (strG) Y)))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (v (strG) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (v (strG) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Z) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) Y)) (a (c (fun (strF) (strF)) <>^) (v (strF) Z))))) (v (strG) W)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (a (c (fun (strF) (strF)) <>^) (v (strF) Z)))) (v (strG) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Z) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (a (c (fun (strF) (strF)) <>^) (v (strF) Y)))) (v (strF) Z))) (v (strG) W)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Z))) (a (c (fun (strF) (strF)) <>^) (v (strF) Y)))) (v (strG) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (c (fun (form) (strF)) ff) (v (form) A))) (a (c (fun (form) (strF)) ff) (v (form) B)))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B)))) (v (strG) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (c (fun (form) (strG)) gg) (v (form) B)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) B))) (v (strG) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B)))) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (a (c (fun (form) (strF)) ff) (v (form) A))) (a (c (fun (form) (strG)) gg) (v (form) B)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) B))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) B)) (v (form) A)))) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Y)) (v (strF) X)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (a (c (fun (form) (strG)) gg) (v (form) B))) (a (c (fun (form) (strF)) ff) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) B)) (v (form) A))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (a (c (fun (form) (strF)) ff) (v (form) A)))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) <>) (v (form) A)))) (v (strG) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) <>) (v (form) A))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) A))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) ||) (v (form) A)))) (a (c (fun (strG) (strG)) ||^) (v (strG) Y)))))))))) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (a (c (fun (form) (strG)) gg) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) ||) (v (form) A)))))))))))))))))))))))))))))"
  tag: DEFINITION
  fingerprint: 9999
  definition {
    definition_type: "INDUCTIVE"
    definition_term: "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) p) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) p)))) (a (c (fun (form) (strG)) gg) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) p)))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) A))) (v (strG) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (v (strG) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Z))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Z)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Z)) (v (strF) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Z)) (v (strF) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (v (strG) Y)))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (v (strG) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (v (strG) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Z) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) Y)) (a (c (fun (strF) (strF)) <>^) (v (strF) Z))))) (v (strG) W)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (a (c (fun (strF) (strF)) <>^) (v (strF) Z)))) (v (strG) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Z) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (a (c (fun (strF) (strF)) <>^) (v (strF) Y)))) (v (strF) Z))) (v (strG) W)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Z))) (a (c (fun (strF) (strF)) <>^) (v (strF) Y)))) (v (strG) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (c (fun (form) (strF)) ff) (v (form) A))) (a (c (fun (form) (strF)) ff) (v (form) B)))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B)))) (v (strG) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (c (fun (form) (strG)) gg) (v (form) B)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) B))) (v (strG) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B)))) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (a (c (fun (form) (strF)) ff) (v (form) A))) (a (c (fun (form) (strG)) gg) (v (form) B)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) B))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) B)) (v (form) A)))) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Y)) (v (strF) X)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (a (c (fun (form) (strG)) gg) (v (form) B))) (a (c (fun (form) (strF)) ff) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) B)) (v (form) A))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (a (c (fun (form) (strF)) ff) (v (form) A)))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) <>) (v (form) A)))) (v (strG) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) <>) (v (form) A))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) A))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) ||) (v (form) A)))) (a (c (fun (strG) (strG)) ||^) (v (strG) Y)))))))))) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (a (c (fun (form) (strG)) gg) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) ||) (v (form) A)))))))))))))))))))))))))))))"
    constants: "|--"
  }    
  library_tag: "c-DL.ml"
  pretty_printed: "|- (!p. |--(ff (Atom p) --> gg (Atom p))) /\ (!X Y A. |--(X --> gg A) /\ |--(ff A --> Y) ==> |--(X --> Y)) /\ (!X Y Z. |--(Y --> X \.^ Z) ==> |--(X **^ Y --> Z)) /\ (!X Y Z. |--(X **^ Y --> Z) ==> |--(Y --> X \.^ Z)) /\ (!X Y Z. |--(X --> Z /.^ Y) ==> |--(X **^ Y --> Z)) /\ (!X Y Z. |--(X **^ Y --> Z) ==> |--(X --> Z /.^ Y)) /\ (!X Y. |--(<>^X --> Y) ==> |--(X --> ||^Y)) /\ (!X Y. |--(X --> ||^Y) ==> |--(<>^X --> Y)) /\ (!X Y Z W.      |--(X **^ Y **^ <>^Z --> W) ==> |--((X **^ Y) **^ <>^Z --> W)) /\ (!X Y Z W.      |--((X **^ <>^Y) **^ Z --> W) ==> |--((X **^ Z) **^ <>^Y --> W)) /\ (!A B Y. |--(ff A **^ ff B --> Y) ==> |--(ff (A ** B) --> Y)) /\ (!A B X Y.      |--(X --> gg A) /\ |--(Y --> gg B) ==> |--(X **^ Y --> gg (A ** B))) /\ (!A B X Y.      |--(X --> gg A) /\ |--(ff B --> Y) ==> |--(ff (A \. B) --> X \.^ Y)) /\ (!A B X. |--(X --> ff A \.^ gg B) ==> |--(X --> gg (A \. B))) /\ (!A B X Y.      |--(ff B --> Y) /\ |--(X --> gg A) ==> |--(ff (B /. A) --> Y /.^ X)) /\ (!A B X. |--(X --> gg B /.^ ff A) ==> |--(X --> gg (B /. A))) /\ (!A Y. |--(<>^ff A --> Y) ==> |--(ff (<>A) --> Y)) /\ (!A X. |--(X --> gg A) ==> |--(<>^X --> gg (<>A))) /\ (!A Y. |--(ff A --> Y) ==> |--(ff (||A) --> ||^Y)) /\ (!A X. |--(X --> ||^gg A) ==> |--(X --> gg (||A)))"
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (seq) (bool)) (bool)) (bool)) !) (l (v (fun (seq) (bool)) |--') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) p) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) p)))) (a (c (fun (form) (strG)) gg) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) p)))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) A))) (v (strG) Y))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (v (strG) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Z))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Z)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Z)) (v (strF) Y))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Z)) (v (strF) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (v (strG) Y)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (v (strG) Y)))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (v (strG) Y))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (v (strG) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Z) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) Y)) (a (c (fun (strF) (strF)) <>^) (v (strF) Z))))) (v (strG) W)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (a (c (fun (strF) (strF)) <>^) (v (strF) Z)))) (v (strG) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Z) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (a (c (fun (strF) (strF)) <>^) (v (strF) Y)))) (v (strF) Z))) (v (strG) W)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Z))) (a (c (fun (strF) (strF)) <>^) (v (strF) Y)))) (v (strG) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (c (fun (form) (strF)) ff) (v (form) A))) (a (c (fun (form) (strF)) ff) (v (form) B)))) (v (strG) Y)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B)))) (v (strG) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (c (fun (form) (strG)) gg) (v (form) B)))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) B))) (v (strG) Y))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B)))) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (a (c (fun (form) (strF)) ff) (v (form) A))) (a (c (fun (form) (strG)) gg) (v (form) B)))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) B))) (v (strG) Y)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A)))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) B)) (v (form) A)))) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Y)) (v (strF) X)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (a (c (fun (form) (strG)) gg) (v (form) B))) (a (c (fun (form) (strF)) ff) (v (form) A)))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) B)) (v (form) A))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (a (c (fun (form) (strF)) ff) (v (form) A)))) (v (strG) Y)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) <>) (v (form) A)))) (v (strG) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) <>) (v (form) A))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) A))) (v (strG) Y)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) ||) (v (form) A)))) (a (c (fun (strG) (strG)) ||^) (v (strG) Y)))))))))) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (a (c (fun (form) (strG)) gg) (v (form) A)))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) ||) (v (form) A)))))))))))))))))))))))))))))) (a (c (fun (fun (seq) (bool)) (bool)) !) (l (v (seq) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (v (seq) a))) (a (v (fun (seq) (bool)) |--') (v (seq) a))))))))"
  tag: DEFINITION
  fingerprint: 9999
  definition {
    definition_type: "INDUCTIVE"
    definition_term: "(a (c (fun (fun (fun (seq) (bool)) (bool)) (bool)) !) (l (v (fun (seq) (bool)) |--') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) p) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) p)))) (a (c (fun (form) (strG)) gg) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) p)))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) A))) (v (strG) Y))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (v (strG) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Z))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Z)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Z)) (v (strF) Y))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Z)) (v (strF) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (v (strG) Y)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (v (strG) Y)))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (v (strG) Y))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (v (strG) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Z) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) Y)) (a (c (fun (strF) (strF)) <>^) (v (strF) Z))))) (v (strG) W)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (a (c (fun (strF) (strF)) <>^) (v (strF) Z)))) (v (strG) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Z) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (a (c (fun (strF) (strF)) <>^) (v (strF) Y)))) (v (strF) Z))) (v (strG) W)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Z))) (a (c (fun (strF) (strF)) <>^) (v (strF) Y)))) (v (strG) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (c (fun (form) (strF)) ff) (v (form) A))) (a (c (fun (form) (strF)) ff) (v (form) B)))) (v (strG) Y)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B)))) (v (strG) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (c (fun (form) (strG)) gg) (v (form) B)))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) B))) (v (strG) Y))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B)))) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (a (c (fun (form) (strF)) ff) (v (form) A))) (a (c (fun (form) (strG)) gg) (v (form) B)))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) B))) (v (strG) Y)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A)))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) B)) (v (form) A)))) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Y)) (v (strF) X)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (a (c (fun (form) (strG)) gg) (v (form) B))) (a (c (fun (form) (strF)) ff) (v (form) A)))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) B)) (v (form) A))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (a (c (fun (form) (strF)) ff) (v (form) A)))) (v (strG) Y)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) <>) (v (form) A)))) (v (strG) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) <>) (v (form) A))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strG) (bool)) (bool)) !) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) A))) (v (strG) Y)))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) ||) (v (form) A)))) (a (c (fun (strG) (strG)) ||^) (v (strG) Y)))))))))) (a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (fun (strF) (bool)) (bool)) !) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (a (c (fun (form) (strG)) gg) (v (form) A)))))) (a (v (fun (seq) (bool)) |--') (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) ||) (v (form) A)))))))))))))))))))))))))))))) (a (c (fun (fun (seq) (bool)) (bool)) !) (l (v (seq) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (v (seq) a))) (a (v (fun (seq) (bool)) |--') (v (seq) a))))))))"
    constants: "|--"
  }    
  library_tag: "c-DL.ml"
  pretty_printed: "|- !|--'. (!p. |--' (ff (Atom p) --> gg (Atom p))) /\ (!X Y A. |--' (X --> gg A) /\ |--' (ff A --> Y) ==> |--' (X --> Y)) /\        (!X Y Z. |--' (Y --> X \.^ Z) ==> |--' (X **^ Y --> Z)) /\        (!X Y Z. |--' (X **^ Y --> Z) ==> |--' (Y --> X \.^ Z)) /\        (!X Y Z. |--' (X --> Z /.^ Y) ==> |--' (X **^ Y --> Z)) /\        (!X Y Z. |--' (X **^ Y --> Z) ==> |--' (X --> Z /.^ Y)) /\        (!X Y. |--' (<>^X --> Y) ==> |--' (X --> ||^Y)) /\        (!X Y. |--' (X --> ||^Y) ==> |--' (<>^X --> Y)) /\        (!X Y Z W.             |--' (X **^ Y **^ <>^Z --> W)             ==> |--' ((X **^ Y) **^ <>^Z --> W)) /\        (!X Y Z W.             |--' ((X **^ <>^Y) **^ Z --> W)             ==> |--' ((X **^ Z) **^ <>^Y --> W)) /\        (!A B Y. |--' (ff A **^ ff B --> Y) ==> |--' (ff (A ** B) --> Y)) /\        (!A B X Y.             |--' (X --> gg A) /\ |--' (Y --> gg B)             ==> |--' (X **^ Y --> gg (A ** B))) /\        (!A B X Y.             |--' (X --> gg A) /\ |--' (ff B --> Y)             ==> |--' (ff (A \. B) --> X \.^ Y)) /\        (!A B X. |--' (X --> ff A \.^ gg B) ==> |--' (X --> gg (A \. B))) /\        (!A B X Y.             |--' (ff B --> Y) /\ |--' (X --> gg A)             ==> |--' (ff (B /. A) --> Y /.^ X)) /\        (!A B X. |--' (X --> gg B /.^ ff A) ==> |--' (X --> gg (B /. A))) /\        (!A Y. |--' (<>^ff A --> Y) ==> |--' (ff (<>A) --> Y)) /\        (!A X. |--' (X --> gg A) ==> |--' (<>^X --> gg (<>A))) /\        (!A Y. |--' (ff A --> Y) ==> |--' (ff (||A) --> ||^Y)) /\        (!A X. |--' (X --> ||^gg A) ==> |--' (X --> gg (||A)))        ==> (!a. |--a ==> |--' a)"
}

theorems {
  conclusion:  "(a (c (fun (fun (seq) (bool)) (bool)) !) (l (v (seq) a) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (seq) (bool)) |--) (v (seq) a))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) p) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) p)))) (a (c (fun (form) (strG)) gg) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) p)))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (v (strG) Y)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) A))) (v (strG) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Z)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Z))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Z)) (v (strF) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Z)) (v (strF) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (v (strG) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (v (strG) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (v (strG) Y)))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Y) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Z) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) W) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (a (c (fun (strF) (strF)) <>^) (v (strF) Z)))) (v (strG) W)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) Y)) (a (c (fun (strF) (strF)) <>^) (v (strF) Z))))) (v (strG) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Y) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Z) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) W) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Z))) (a (c (fun (strF) (strF)) <>^) (v (strF) Y)))) (v (strG) W)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (a (c (fun (strF) (strF)) <>^) (v (strF) Y)))) (v (strF) Z))) (v (strG) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) B) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B)))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (c (fun (form) (strF)) ff) (v (form) A))) (a (c (fun (form) (strF)) ff) (v (form) B)))) (v (strG) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (c (fun (form) (strG)) gg) (v (form) B))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B)))) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Y))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) B))) (v (strG) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (a (c (fun (form) (strF)) ff) (v (form) A))) (a (c (fun (form) (strG)) gg) (v (form) B))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) B)) (v (form) A)))) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Y)) (v (strF) X))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) B))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) B)) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (a (c (fun (form) (strG)) gg) (v (form) B))) (a (c (fun (form) (strF)) ff) (v (form) A))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) <>) (v (form) A)))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (a (c (fun (form) (strF)) ff) (v (form) A)))) (v (strG) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) <>) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A)))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) ||) (v (form) A)))) (a (c (fun (strG) (strG)) ||^) (v (strG) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) A))) (v (strG) Y))))))))) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) ||) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (a (c (fun (form) (strG)) gg) (v (form) A))))))))))))))))))))))))))))))))"
  tag: DEFINITION
  fingerprint: 9999
  definition {
    definition_type: "INDUCTIVE"
    definition_term: "(a (c (fun (fun (seq) (bool)) (bool)) !) (l (v (seq) a) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (seq) (bool)) |--) (v (seq) a))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) p) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) p)))) (a (c (fun (form) (strG)) gg) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) p)))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (v (strG) Y)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) A))) (v (strG) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Z)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Z))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Z)) (v (strF) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Y) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Z)) (v (strF) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (v (strG) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (v (strG) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (v (strG) Y)))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Y) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Z) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) W) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (a (c (fun (strF) (strF)) <>^) (v (strF) Z)))) (v (strG) W)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) Y)) (a (c (fun (strF) (strF)) <>^) (v (strF) Z))))) (v (strG) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Y) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Z) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) W) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Z))) (a (c (fun (strF) (strF)) <>^) (v (strF) Y)))) (v (strG) W)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (a (c (fun (strF) (strF)) <>^) (v (strF) Y)))) (v (strF) Z))) (v (strG) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) B) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B)))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (c (fun (form) (strF)) ff) (v (form) A))) (a (c (fun (form) (strF)) ff) (v (form) B)))) (v (strG) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (c (fun (form) (strG)) gg) (v (form) B))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B)))) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Y))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) B))) (v (strG) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (a (c (fun (form) (strF)) ff) (v (form) A))) (a (c (fun (form) (strG)) gg) (v (form) B))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) B)) (v (form) A)))) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Y)) (v (strF) X))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) B))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) B) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) B)) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (a (c (fun (form) (strG)) gg) (v (form) B))) (a (c (fun (form) (strF)) ff) (v (form) A))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) <>) (v (form) A)))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (a (c (fun (form) (strF)) ff) (v (form) A)))) (v (strG) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) <>) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A)))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (strG) (bool)) (bool)) ?) (l (v (strG) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) ||) (v (form) A)))) (a (c (fun (strG) (strG)) ||^) (v (strG) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) A))) (v (strG) Y))))))))) (a (c (fun (fun (form) (bool)) (bool)) ?) (l (v (form) A) (a (c (fun (fun (strF) (bool)) (bool)) ?) (l (v (strF) X) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (seq) (fun (seq) (bool))) =) (v (seq) a)) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) ||) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (a (c (fun (form) (strG)) gg) (v (form) A))))))))))))))))))))))))))))))))"
    constants: "|--"
  }    
  library_tag: "c-DL.ml"
  pretty_printed: "|- !a. |--a <=>     (?p. a = (ff (Atom p) --> gg (Atom p))) \/     (?X Y A. a = (X --> Y) /\ |--(X --> gg A) /\ |--(ff A --> Y)) \/     (?X Y Z. a = (X **^ Y --> Z) /\ |--(Y --> X \.^ Z)) \/     (?X Y Z. a = (Y --> X \.^ Z) /\ |--(X **^ Y --> Z)) \/     (?X Y Z. a = (X **^ Y --> Z) /\ |--(X --> Z /.^ Y)) \/     (?X Y Z. a = (X --> Z /.^ Y) /\ |--(X **^ Y --> Z)) \/     (?X Y. a = (X --> ||^Y) /\ |--(<>^X --> Y)) \/     (?X Y. a = (<>^X --> Y) /\ |--(X --> ||^Y)) \/     (?X Y Z W.          a = ((X **^ Y) **^ <>^Z --> W) /\ |--(X **^ Y **^ <>^Z --> W)) \/     (?X Y Z W.          a = ((X **^ Z) **^ <>^Y --> W) /\ |--((X **^ <>^Y) **^ Z --> W)) \/     (?A B Y. a = (ff (A ** B) --> Y) /\ |--(ff A **^ ff B --> Y)) \/     (?A B X Y.          a = (X **^ Y --> gg (A ** B)) /\          |--(X --> gg A) /\          |--(Y --> gg B)) \/     (?A B X Y.          a = (ff (A \. B) --> X \.^ Y) /\          |--(X --> gg A) /\          |--(ff B --> Y)) \/     (?A B X. a = (X --> gg (A \. B)) /\ |--(X --> ff A \.^ gg B)) \/     (?A B X Y.          a = (ff (B /. A) --> Y /.^ X) /\          |--(ff B --> Y) /\          |--(X --> gg A)) \/     (?A B X. a = (X --> gg (B /. A)) /\ |--(X --> gg B /.^ ff A)) \/     (?A Y. a = (ff (<>A) --> Y) /\ |--(<>^ff A --> Y)) \/     (?A X. a = (<>^X --> gg (<>A)) /\ |--(X --> gg A)) \/     (?A Y. a = (ff (||A) --> ||^Y) /\ |--(ff A --> Y)) \/     (?A X. a = (X --> gg (||A)) /\ |--(X --> ||^gg A))"
}















theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) p)))) (a (c (fun (form) (strG)) gg) (a (c (fun (list (char)) (form)) Atom) (v (list (char)) p)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (Atom p) --> gg (Atom p))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) A))) (v (strG) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (v (strG) Y))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(X --> gg A) /\ |--(ff A --> Y) ==> |--(X --> Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:   "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Z))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(Y --> X \.^ Z) ==> |--(X **^ Y --> Z)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:   "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Z)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(X **^ Y --> Z) ==> |--(Y --> X \.^ Z)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:   "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Z)) (v (strF) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(X --> Z /.^ Y) ==> |--(X **^ Y --> Z)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (v (strG) Z)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Z)) (v (strF) Y)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(X **^ Y --> Z) ==> |--(X --> Z /.^ Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (v (strG) Y)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(<>^X --> Y) ==> |--(X --> ||^Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:  "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (v (strG) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (v (strG) Y))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(X --> ||^Y) ==> |--(<>^X --> Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) Y)) (a (c (fun (strF) (strF)) <>^) (v (strF) Z))))) (v (strG) W)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (a (c (fun (strF) (strF)) <>^) (v (strF) Z)))) (v (strG) W))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(X **^ (Y **^ <>^Z) --> W) ==> |--((X **^ Y) **^ <>^Z --> W)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:   "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (a (c (fun (strF) (strF)) <>^) (v (strF) Y)))) (v (strF) Z))) (v (strG) W)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Z))) (a (c (fun (strF) (strF)) <>^) (v (strF) Y)))) (v (strG) W))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--((X **^ <>^Y) **^ Z --> W) ==> |--((X **^ Z) **^ <>^Y --> W)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:   "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (a (c (fun (form) (strF)) ff) (v (form) A))) (a (c (fun (form) (strF)) ff) (v (form) B)))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B)))) (v (strG) Y))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff A **^ ff B --> Y) ==> |--(ff (A ** B) --> Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) Y)) (a (c (fun (form) (strG)) gg) (v (form) B)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (a (c (fun (strF) (fun (strF) (strF))) **^) (v (strF) X)) (v (strF) Y))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(X --> gg A) /\ |--(Y --> gg B) ==> |--(X **^ Y --> gg (A ** B))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) B))) (v (strG) Y))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B)))) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (v (strF) X)) (v (strG) Y)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(X --> gg A) /\ |--(ff B --> Y) ==> |--(ff (A \. B) --> X \.^ Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strF) (fun (strG) (strG))) \\.^) (a (c (fun (form) (strF)) ff) (v (form) A))) (a (c (fun (form) (strG)) gg) (v (form) B)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(X --> ff A \.^ gg B) ==> |--(X --> gg (A \. B))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) B))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) B)) (v (form) A)))) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (v (strG) Y)) (v (strF) X)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff B --> Y) /\ |--(X --> gg A) ==> |--(ff (B /. A) --> Y /.^ X)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (a (c (fun (strG) (fun (strF) (strG))) /.^) (a (c (fun (form) (strG)) gg) (v (form) B))) (a (c (fun (form) (strF)) ff) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) B)) (v (form) A))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(X --> gg B /.^ ff A) ==> |--(X --> gg (B /. A))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (a (c (fun (form) (strF)) ff) (v (form) A)))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) <>) (v (form) A)))) (v (strG) Y))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(<>^ff A --> Y) ==> |--(ff (<>A) --> Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (v (form) A))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (strF) (strF)) <>^) (v (strF) X))) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) <>) (v (form) A))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(X --> gg A) ==> |--(<>^X --> gg (<>A))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) A))) (v (strG) Y)))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) ||) (v (form) A)))) (a (c (fun (strG) (strG)) ||^) (v (strG) Y)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff A --> Y) ==> |--(ff (||A) --> ||^Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (strG) (strG)) ||^) (a (c (fun (form) (strG)) gg) (v (form) A)))))) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (v (strF) X)) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) ||) (v (form) A))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(X --> ||^gg A) ==> |--(X --> gg (||A))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}






















































theorems {
  conclusion: "(a (c (fun (fun (form) (bool)) (bool)) !) (l (v (form) A) (a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (v (fun (form) (strF)) focf) (v (form) A))) (a (c (fun (form) (strG)) gg) (v (form) A))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "!A. |-- (focf A --> gg A)" 
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}






theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) X)) (v (form) Y))) (v (form) Y)))) (a (c (fun (form) (strG)) gg) (v (form) X))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff ((X /. Y) ** Y) --> gg X)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) Y)) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) Y)) (v (form) X))))) (a (c (fun (form) (strG)) gg) (v (form) X))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (Y ** (Y \. X)) --> gg X)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) Y))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) X)) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) Y)) (v (form) X))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff Y --> gg ( X /. (Y \. X)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (v (form) Y))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) X)) (v (form) Y))) (v (form) X)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff Y --> gg (((X /. Y)) \. X))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) A)) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) B)) (v (form) A)))) (v (form) A)))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) B)) (v (form) A)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff ( ( A /. (B \. A)) \. A) --> gg (B \. A))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) B)) (v (form) A)))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) A)) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) B)) (v (form) A)))) (v (form) A)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (B \. A) --> gg ( ( A /. (B \. A)) \. A))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) A)) (v (form) B))) (v (form) B))) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) C))))) (a (c (fun (form) (strG)) gg) (v (form) C))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (((A /. B) ** B) ** (A \. C)) --> gg C)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) /.) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B))) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B)))) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B)))))) (a (c (fun (form) (strG)) gg) (v (form) B))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (A ** (((A \. B) /. (A \. B)) ** (A \. B)))--> gg B)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) /.) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (v (form) B))) (v (form) A))) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) A)) (v (form) C))) (v (form) C)))))) (a (c (fun (form) (strG)) gg) (v (form) B))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (A ** (((A \. B) /. A) ** ((A /. C) ** C))) --> gg B)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:  "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) C)) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) C)) (v (form) A))) (v (form) C)))) (v (form) C)))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) C)) (v (form) A))) (v (form) C)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff ((C /. ((C /. A) \. C)) \. C) --> gg ((C /. A) \. C))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) C)) (v (form) A))) (v (form) C)))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) C)) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) C)) (v (form) A))) (v (form) C)))) (v (form) C)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff ((C /. A) \. C) --> gg ((C /. ((C /. A) \. C)) \. C))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))) (v (form) A)))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) /.) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))) (v (form) C))) (v (form) C))) (v (form) A)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff ((A ** B) ** A) --> gg ((( (A ** B) ** C) /. C) ** A))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))) (v (form) C))))) (a (c (fun (form) (strG)) gg) (v (form) C))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff ((A ** B) \. ((A ** B) ** C))--> gg C)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) /.) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))) (v (form) C)))) (v (form) C)))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) C)) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) C)) (v (form) B))) (v (form) B))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff ((((A ** B)) \. ((A ** B) ** C)) /. C) --> gg (C /. ((C /. B) ** B)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) /.) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))) (v (form) C)))) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) A)) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) C)) (v (form) A)))))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) C)) (v (form) C)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff ((((A ** B) \. ((A ** B) ** C)) /. (A /. (C\. A)))) --> gg (C /. C))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:  "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) /.) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))) (v (form) C)))) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) A)) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) C)) (v (form) D))) (v (form) A)))))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) C)) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) D)) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) C)) (v (form) D)))) (v (form) D))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (((A ** B) \. ((A ** B) ** C)) /. ((A /. ((C \. D)\. A)))) --> gg (C /. ((D /. (C \. D)) \. D)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) D)) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) C)) (v (form) D)))) (v (form) D)))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) A)) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) C)) (v (form) D))) (v (form) A))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff ((D /. (C \. D)) \. D) --> gg (A /. ((C \. D) \. A)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) A)) (v (form) B))))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) C)) (v (form) A))) (v (form) C))) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) A)) (v (form) B))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (A ** (A /. B))--> gg (((C /. A) \. C) ** (A /. B)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:  "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) D)) (v (form) C)))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) D)) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) A)) (v (form) B))) (v (form) B))) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) A)) (v (form) B))) (v (form) B))) (v (form) C)))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (D /. C) --> gg (D /. ((( (A /. B)) ** B) ** (((A /. B) ** B) \. C))))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:   "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) A)) (v (form) B))) (v (form) B))) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) A)) (v (form) B))) (v (form) B))) (v (form) C))))) (a (c (fun (form) (strG)) gg) (v (form) C))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff ((((A /. B) ** B) ** (((A /. B) ** B) \. C))) --> gg (C))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:  "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) A)) (v (form) B))) (v (form) B))) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) A)) (a (c (fun (form) (form)) <>) (v (form) C)))))) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) <>) (v (form) C)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (((A /. B) ** B) ** (A \. (<> C))) --> gg (<> C))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:  "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) C)) (a (c (fun (form) (form)) <>) (v (form) A)))) (v (form) C)))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) C)) (a (c (fun (form) (form)) <>) (a (a (c (fun (form) (fun (form) (form))) \\.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) C)) (v (form) A))) (v (form) C))))) (v (form) C)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff ((C /. (<> A)) \. C) --> gg ((C /. (<> ((C /. A) \. C))) \. C))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:   "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) X)) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) Y)) (a (c (fun (form) (form)) <>) (v (form) Z)))))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) X)) (v (form) Y))) (a (c (fun (form) (form)) <>) (v (form) Z))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (X ** (Y /. (<> Z))) --> gg ((X ** Y) /. (<> Z)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:   "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) <>) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) X)) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) Y)) (a (c (fun (form) (form)) <>) (v (form) Z))))))) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) <>) (a (a (c (fun (form) (fun (form) (form))) /.) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) X)) (v (form) Y))) (a (c (fun (form) (form)) <>) (v (form) Z)))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (<> (X ** (Y /. (<> Z)))) --> gg (<>((X ** Y) /. (<> Z))))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion: "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) X)) (a (a (c (fun (form) (fun (form) (form))) /.) (a (c (fun (form) (form)) <>) (v (form) Y))) (a (c (fun (form) (form)) <>) (v (form) Z)))))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) X)) (a (c (fun (form) (form)) <>) (v (form) Y)))) (a (c (fun (form) (form)) <>) (v (form) Z))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (X ** ((<> Y) /. (<> Z))) --> gg ((X ** (<> Y)) /. (<> Z)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:   "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) X)) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) Z)) (a (c (fun (form) (form)) <>) (v (form) Y)))))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) X)) (a (c (fun (form) (form)) <>) (v (form) Y)))) (v (form) Z)))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (X /. ( Z ** (<> Y))) --> gg ((X /. (<> Y)) /. Z))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:   "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (a (c (fun (form) (fun (form) (form))) **) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) Z)) (v (form) Y))) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) Y)) (a (c (fun (form) (form)) <>) (v (form) X)))))) (a (c (fun (form) (strG)) gg) (a (a (c (fun (form) (fun (form) (form))) /.) (v (form) Z)) (a (c (fun (form) (form)) <>) (v (form) X))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff ((Z /. Y) ** (Y/. (<> X))) --> gg (Z /.(<> X)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

theorems {
  conclusion:   "(a (c (fun (seq) (bool)) |--) (a (a (c (fun (strF) (fun (strG) (seq))) -->) (a (c (fun (form) (strF)) ff) (a (c (fun (form) (form)) <>) (a (c (fun (form) (form)) <>) (a (c (fun (form) (form)) <>) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))))))) (a (c (fun (form) (strG)) gg) (a (c (fun (form) (form)) <>) (a (a (c (fun (form) (fun (form) (form))) \\.) (v (form) C)) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) C)) (a (c (fun (form) (form)) <>) (a (c (fun (form) (form)) <>) (a (a (c (fun (form) (fun (form) (form))) **) (v (form) A)) (v (form) B))))))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 9999
  library_tag: "c-DL.ml"
  pretty_printed: "|--(ff (<> (<> (<> (A ** B)))) --> gg (<> (C \. (C ** (<> (<> (A ** B)))))))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 9999
}

