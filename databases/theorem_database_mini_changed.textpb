theorems {
	fingerprint: 3861542298922911510  
	conclusion: "(a (c (fun (fun (recspace (num)) (bool)) (bool)) ?) (l (v (recspace (num)) a) (a (c (fun (fun (fun (recspace (num)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (num)) (bool)) hypermap') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (recspace (num)) (bool)) (bool)) !) (l (v (recspace (num)) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (num) (bool)) (bool)) ?) (l (v (num) a) (a (a (c (fun (recspace (num)) (fun (recspace (num)) (bool))) =) (v (recspace (num)) a)) (a (l (v (num) a) (a (a (a (c (fun (num) (fun (num) (fun (fun (num) (recspace (num))) (recspace (num))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (num) a)) (l (v (num) n) (c (recspace (num)) BOTTOM)))) (v (num) a)))))) (a (v (fun (recspace (num)) (bool)) hypermap') (v (recspace (num)) a)))))) (a (v (fun (recspace (num)) (bool)) hypermap') (v (recspace (num)) a)))))))"
	tag: THEOREM
    training_split: TRAINING
    library_tag: "c-fDL.ml"
	pretty_printed: "|- ?a. !string'. (!a. (?a. a = (\\a. CONSTR 0 a (\\n. BOTTOM)) a) ==> string' a) ==> string' a"
	proof_function: "type_definition_helper"
}

theorems {
	pretty_printed: "|- (!a. _mk_string (_dest_string a) = a) /\\\n   (!r. (!string'. (!a. (?a. a = (\\a. CONSTR 0 a (\\n. BOTTOM)) a)        ==> string' a)   ==> string' r) <=>\n        _dest_string (_mk_string r) = r)"
	fingerprint: 2744787453934345244  
	conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (hypermap) (bool)) (bool)) !) (l (v (hypermap) a) (a (a (c (fun (hypermap) (fun (hypermap) (bool))) =) (a (c (fun (recspace (num)) (hypermap)) hypermap) (a (c (fun (hypermap) (recspace (num))) tuple_hypermap) (v (hypermap) a)))) (v (hypermap) a))))) (a (c (fun (fun (recspace (num)) (bool)) (bool)) !) (l (v (recspace (num)) r) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (fun (fun (recspace (num)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (num)) (bool)) hypermap') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (recspace (num)) (bool)) (bool)) !) (l (v (recspace (num)) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (num) (bool)) (bool)) ?) (l (v (num) a) (a (a (c (fun (recspace (num)) (fun (recspace (num)) (bool))) =) (v (recspace (num)) a)) (a (l (v (num) a) (a (a (a (c (fun (num) (fun (num) (fun (fun (num) (recspace (num))) (recspace (num))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (num) a)) (l (v (num) n) (c (recspace (num)) BOTTOM)))) (v (num) a)))))) (a (v (fun (recspace (num)) (bool)) hypermap') (v (recspace (num)) a)))))) (a (v (fun (recspace (num)) (bool)) hypermap') (v (recspace (num)) r)))))) (a (a (c (fun (recspace (num)) (fun (recspace (num)) (bool))) =) (a (c (fun (hypermap) (recspace (num))) tuple_hypermap) (a (c (fun (recspace (num)) (hypermap)) hypermap) (v (recspace (num)) r)))) (v (recspace (num)) r))))))"
	tag: TYPE_DEFINITION
	type_definition {
		type_name: "hypermap"
		abs_name: "hypermap"
		rep_name: "tuple_hypermap"
		theorem_arg: 3861542298922911510 
	}
    library_tag: "c-fDL.ml"
} 
 
theorems {
	fingerprint: 3808525544589139979  
	conclusion: "(a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) loop') (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) cc_v11') (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) finite_product') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a0') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a0')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) cc_v11') (v (recspace (list (char))) a)))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a0')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) finite_product') (v (recspace (list (char))) a))))))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0')))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a1') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) a) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a)))))))))) (a (v (fun (recspace (list (char))) (bool)) cc_v11') (v (recspace (list (char))) a1')))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a2) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) a) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a)))))))))) (a (v (fun (recspace (list (char))) (bool)) finite_product') (v (recspace (list (char))) a2)))))))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a)))))))))))"
	tag: THEOREM
    training_split: TRAINING
    library_tag: "c-fDL.ml"
	pretty_printed: "|- ?a. !form' pform' nform'.\n           (!a0'. (?a. a0' = (\\a. CONSTR 0 (@v. T) (FCONS a (\\n. BOTTOM))) a /\\       pform' a) \\/  (?a. a0' =       (\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM))) a /\\       nform' a)  ==> form' a0') /\\\n           (!a1'. (?a. a1' = (\\a. CONSTR (SUC (SUC 0)) a (\\n. BOTTOM)) a) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR (SUC (SUC (SUC 0))) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       form' a0 /\\       form' a1) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       form' a0 /\\       form' a1) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       form' a0 /\\       form' a1) \\/  (?a. a1' =       (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0))))))            (@v. T)            (FCONS a (\\n. BOTTOM)))       a /\\       form' a)  ==> pform' a1') /\\\n           (!a2. (?a. a2 =      (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))           a           (\\n. BOTTOM))      a) \\/ (?a0 a1.      a2 =      (\\a0 a1.           CONSTR           (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))           (@v. T)           (FCONS a0 (FCONS a1 (\\n. BOTTOM))))      a0      a1 /\\      form' a0 /\\      form' a1) \\/ (?a0 a1.      a2 =      (\\a0 a1.           CONSTR           (SUC           (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))           (@v. T)           (FCONS a0 (FCONS a1 (\\n. BOTTOM))))      a0      a1 /\\      form' a0 /\\      form' a1) \\/ (?a0 a1.      a2 =      (\\a0 a1.           CONSTR           (SUC           (SUC           (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))))           (@v. T)           (FCONS a0 (FCONS a1 (\\n. BOTTOM))))      a0      a1 /\\      form' a0 /\\      form' a1) \\/ (?a. a2 =      (\\a. CONSTR           (SUC           (SUC           (SUC           (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))))           (@v. T)           (FCONS a (\\n. BOTTOM)))      a /\\      form' a) ==> nform' a2)\n           ==> form' a"
	proof_function: "type_definition_helper"
}
theorems {
	pretty_printed: "|- (!a. _mk_form (_dest_form a) = a) /\\\n   (!r. (!form' pform' nform'.\n             (!a0'. (?a. a0' =         (\\a. CONSTR 0 (@v. T) (FCONS a (\\n. BOTTOM))) a /\\         pform' a) \\/    (?a. a0' =         (\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM)))         a /\\         nform' a)    ==> form' a0') /\\\n             (!a1'. (?a. a1' = (\\a. CONSTR (SUC (SUC 0)) a (\\n. BOTTOM)) a) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR (SUC (SUC (SUC 0))) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         form' a0 /\\         form' a1) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         form' a0 /\\         form' a1) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         form' a0 /\\         form' a1) \\/    (?a. a1' =         (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0))))))              (@v. T)              (FCONS a (\\n. BOTTOM)))         a /\\         form' a)    ==> pform' a1') /\\\n             (!a2. (?a. a2 =        (\\a. CONSTR             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))             a             (\\n. BOTTOM))        a) \\/   (?a0 a1.        a2 =        (\\a0 a1.             CONSTR             (SUC             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))             (@v. T)             (FCONS a0 (FCONS a1 (\\n. BOTTOM))))        a0        a1 /\\        form' a0 /\\        form' a1) \\/   (?a0 a1.        a2 =        (\\a0 a1.             CONSTR             (SUC             (SUC             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))             (@v. T)             (FCONS a0 (FCONS a1 (\\n. BOTTOM))))        a0        a1 /\\        form' a0 /\\        form' a1) \\/   (?a0 a1.        a2 =        (\\a0 a1.             CONSTR             (SUC             (SUC             (SUC             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))))             (@v. T)             (FCONS a0 (FCONS a1 (\\n. BOTTOM))))        a0        a1 /\\        form' a0 /\\        form' a1) \\/   (?a. a2 =        (\\a. CONSTR             (SUC             (SUC             (SUC             (SUC             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))))             (@v. T)             (FCONS a (\\n. BOTTOM)))        a /\\        form' a)   ==> nform' a2)\n             ==> form' r) <=>\n        _dest_form (_mk_form r) = r)"
	fingerprint: 2222489597778136962  
	conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a) (a (a (c (fun (loop) (fun (loop) (bool))) =) (a (c (fun (recspace (list (char))) (loop)) loop) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a)))) (v (loop) a))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) r) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) loop') (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) cc_v11') (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) finite_product') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a0') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a0')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) cc_v11') (v (recspace (list (char))) a)))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a0')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) finite_product') (v (recspace (list (char))) a))))))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0')))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a1') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) a) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a)))))))))) (a (v (fun (recspace (list (char))) (bool)) cc_v11') (v (recspace (list (char))) a1')))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a2) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) a) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a)))))))))) (a (v (fun (recspace (list (char))) (bool)) finite_product') (v (recspace (list (char))) a2)))))))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) r)))))))))) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (a (c (fun (recspace (list (char))) (loop)) loop) (v (recspace (list (char))) r)))) (v (recspace (list (char))) r))))))"
	tag: TYPE_DEFINITION
	type_definition {
		type_name: "loop"
		abs_name: "loop"
		rep_name: "tuple_loop"
		theorem_arg: 3808525544589139979 
	}
    library_tag: "c-fDL.ml"
} 
 
theorems {
	fingerprint: 3860484268591891723  
	conclusion: "(a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) loop') (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) cc_v11') (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) finite_product') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a0') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a0')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) cc_v11') (v (recspace (list (char))) a)))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a0')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) finite_product') (v (recspace (list (char))) a))))))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0')))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a1') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) a) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a)))))))))) (a (v (fun (recspace (list (char))) (bool)) cc_v11') (v (recspace (list (char))) a1')))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a2) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) a) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a)))))))))) (a (v (fun (recspace (list (char))) (bool)) finite_product') (v (recspace (list (char))) a2)))))))) (a (v (fun (recspace (list (char))) (bool)) cc_v11') (v (recspace (list (char))) a)))))))))))"
	tag: THEOREM
    training_split: TRAINING
    library_tag: "c-fDL.ml"
	pretty_printed: "|- ?a. !form' pform' nform'.\n           (!a0'. (?a. a0' = (\\a. CONSTR 0 (@v. T) (FCONS a (\\n. BOTTOM))) a /\\       pform' a) \\/  (?a. a0' =       (\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM))) a /\\       nform' a)  ==> form' a0') /\\\n           (!a1'. (?a. a1' = (\\a. CONSTR (SUC (SUC 0)) a (\\n. BOTTOM)) a) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR (SUC (SUC (SUC 0))) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       form' a0 /\\       form' a1) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       form' a0 /\\       form' a1) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       form' a0 /\\       form' a1) \\/  (?a. a1' =       (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0))))))            (@v. T)            (FCONS a (\\n. BOTTOM)))       a /\\       form' a)  ==> pform' a1') /\\\n           (!a2. (?a. a2 =      (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))           a           (\\n. BOTTOM))      a) \\/ (?a0 a1.      a2 =      (\\a0 a1.           CONSTR           (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))           (@v. T)           (FCONS a0 (FCONS a1 (\\n. BOTTOM))))      a0      a1 /\\      form' a0 /\\      form' a1) \\/ (?a0 a1.      a2 =      (\\a0 a1.           CONSTR           (SUC           (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))           (@v. T)           (FCONS a0 (FCONS a1 (\\n. BOTTOM))))      a0      a1 /\\      form' a0 /\\      form' a1) \\/ (?a0 a1.      a2 =      (\\a0 a1.           CONSTR           (SUC           (SUC           (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))))           (@v. T)           (FCONS a0 (FCONS a1 (\\n. BOTTOM))))      a0      a1 /\\      form' a0 /\\      form' a1) \\/ (?a. a2 =      (\\a. CONSTR           (SUC           (SUC           (SUC           (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))))           (@v. T)           (FCONS a (\\n. BOTTOM)))      a /\\      form' a) ==> nform' a2)\n           ==> pform' a"
	proof_function: "type_definition_helper"
}
theorems {
	pretty_printed: "|- (!a. _mk_pform (_dest_pform a) = a) /\\\n   (!r. (!form' pform' nform'.\n             (!a0'. (?a. a0' =         (\\a. CONSTR 0 (@v. T) (FCONS a (\\n. BOTTOM))) a /\\         pform' a) \\/    (?a. a0' =         (\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM)))         a /\\         nform' a)    ==> form' a0') /\\\n             (!a1'. (?a. a1' = (\\a. CONSTR (SUC (SUC 0)) a (\\n. BOTTOM)) a) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR (SUC (SUC (SUC 0))) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         form' a0 /\\         form' a1) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         form' a0 /\\         form' a1) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         form' a0 /\\         form' a1) \\/    (?a. a1' =         (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0))))))              (@v. T)              (FCONS a (\\n. BOTTOM)))         a /\\         form' a)    ==> pform' a1') /\\\n             (!a2. (?a. a2 =        (\\a. CONSTR             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))             a             (\\n. BOTTOM))        a) \\/   (?a0 a1.        a2 =        (\\a0 a1.             CONSTR             (SUC             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))             (@v. T)             (FCONS a0 (FCONS a1 (\\n. BOTTOM))))        a0        a1 /\\        form' a0 /\\        form' a1) \\/   (?a0 a1.        a2 =        (\\a0 a1.             CONSTR             (SUC             (SUC             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))             (@v. T)             (FCONS a0 (FCONS a1 (\\n. BOTTOM))))        a0        a1 /\\        form' a0 /\\        form' a1) \\/   (?a0 a1.        a2 =        (\\a0 a1.             CONSTR             (SUC             (SUC             (SUC             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))))             (@v. T)             (FCONS a0 (FCONS a1 (\\n. BOTTOM))))        a0        a1 /\\        form' a0 /\\        form' a1) \\/   (?a. a2 =        (\\a. CONSTR             (SUC             (SUC             (SUC             (SUC             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))))             (@v. T)             (FCONS a (\\n. BOTTOM)))        a /\\        form' a)   ==> nform' a2)\n             ==> pform' r) <=>\n        _dest_pform (_mk_pform r) = r)"
	fingerprint: 1128851013916042500  
	conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (cc_v11) (bool)) (bool)) !) (l (v (cc_v11) a) (a (a (c (fun (cc_v11) (fun (cc_v11) (bool))) =) (a (c (fun (recspace (list (char))) (cc_v11)) cc_v11) (a (c (fun (cc_v11) (recspace (list (char)))) pair_of_cc_v11) (v (cc_v11) a)))) (v (cc_v11) a))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) r) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) loop') (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) cc_v11') (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) finite_product') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a0') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a0')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) cc_v11') (v (recspace (list (char))) a)))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a0')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) finite_product') (v (recspace (list (char))) a))))))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0')))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a1') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) a) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a)))))))))) (a (v (fun (recspace (list (char))) (bool)) cc_v11') (v (recspace (list (char))) a1')))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a2) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) a) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a)))))))))) (a (v (fun (recspace (list (char))) (bool)) finite_product') (v (recspace (list (char))) a2)))))))) (a (v (fun (recspace (list (char))) (bool)) cc_v11') (v (recspace (list (char))) r)))))))))) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (a (c (fun (cc_v11) (recspace (list (char)))) pair_of_cc_v11) (a (c (fun (recspace (list (char))) (cc_v11)) cc_v11) (v (recspace (list (char))) r)))) (v (recspace (list (char))) r))))))"
	tag: TYPE_DEFINITION
	type_definition {
		type_name: "cc_v11"
		abs_name: "cc_v11"
		rep_name: "pair_of_cc_v11"
		theorem_arg: 3860484268591891723 
	}
    library_tag: "c-fDL.ml"
} 
 
theorems {
	fingerprint: 2627193184557133310  
	conclusion: "(a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) loop') (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) cc_v11') (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) finite_product') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a0') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a0')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) cc_v11') (v (recspace (list (char))) a)))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a0')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) finite_product') (v (recspace (list (char))) a))))))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0')))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a1') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) a) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a)))))))))) (a (v (fun (recspace (list (char))) (bool)) cc_v11') (v (recspace (list (char))) a1')))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a2) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) a) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a)))))))))) (a (v (fun (recspace (list (char))) (bool)) finite_product') (v (recspace (list (char))) a2)))))))) (a (v (fun (recspace (list (char))) (bool)) finite_product') (v (recspace (list (char))) a)))))))))))"
	tag: THEOREM
    training_split: TRAINING
    library_tag: "c-fDL.ml"
	pretty_printed: "|- ?a. !form' pform' nform'.\n           (!a0'. (?a. a0' = (\\a. CONSTR 0 (@v. T) (FCONS a (\\n. BOTTOM))) a /\\       pform' a) \\/  (?a. a0' =       (\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM))) a /\\       nform' a)  ==> form' a0') /\\\n           (!a1'. (?a. a1' = (\\a. CONSTR (SUC (SUC 0)) a (\\n. BOTTOM)) a) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR (SUC (SUC (SUC 0))) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       form' a0 /\\       form' a1) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       form' a0 /\\       form' a1) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       form' a0 /\\       form' a1) \\/  (?a. a1' =       (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0))))))            (@v. T)            (FCONS a (\\n. BOTTOM)))       a /\\       form' a)  ==> pform' a1') /\\\n           (!a2. (?a. a2 =      (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))           a           (\\n. BOTTOM))      a) \\/ (?a0 a1.      a2 =      (\\a0 a1.           CONSTR           (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))           (@v. T)           (FCONS a0 (FCONS a1 (\\n. BOTTOM))))      a0      a1 /\\      form' a0 /\\      form' a1) \\/ (?a0 a1.      a2 =      (\\a0 a1.           CONSTR           (SUC           (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))           (@v. T)           (FCONS a0 (FCONS a1 (\\n. BOTTOM))))      a0      a1 /\\      form' a0 /\\      form' a1) \\/ (?a0 a1.      a2 =      (\\a0 a1.           CONSTR           (SUC           (SUC           (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))))           (@v. T)           (FCONS a0 (FCONS a1 (\\n. BOTTOM))))      a0      a1 /\\      form' a0 /\\      form' a1) \\/ (?a. a2 =      (\\a. CONSTR           (SUC           (SUC           (SUC           (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))))           (@v. T)           (FCONS a (\\n. BOTTOM)))      a /\\      form' a) ==> nform' a2)\n           ==> nform' a"
	proof_function: "type_definition_helper"
}
theorems {
	pretty_printed: "|- (!a. _mk_nform (_dest_nform a) = a) /\\\n   (!r. (!form' pform' nform'.\n             (!a0'. (?a. a0' =         (\\a. CONSTR 0 (@v. T) (FCONS a (\\n. BOTTOM))) a /\\         pform' a) \\/    (?a. a0' =         (\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM)))         a /\\         nform' a)    ==> form' a0') /\\\n             (!a1'. (?a. a1' = (\\a. CONSTR (SUC (SUC 0)) a (\\n. BOTTOM)) a) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR (SUC (SUC (SUC 0))) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         form' a0 /\\         form' a1) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         form' a0 /\\         form' a1) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         form' a0 /\\         form' a1) \\/    (?a. a1' =         (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0))))))              (@v. T)              (FCONS a (\\n. BOTTOM)))         a /\\         form' a)    ==> pform' a1') /\\\n             (!a2. (?a. a2 =        (\\a. CONSTR             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))             a             (\\n. BOTTOM))        a) \\/   (?a0 a1.        a2 =        (\\a0 a1.             CONSTR             (SUC             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))             (@v. T)             (FCONS a0 (FCONS a1 (\\n. BOTTOM))))        a0        a1 /\\        form' a0 /\\        form' a1) \\/   (?a0 a1.        a2 =        (\\a0 a1.             CONSTR             (SUC             (SUC             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))             (@v. T)             (FCONS a0 (FCONS a1 (\\n. BOTTOM))))        a0        a1 /\\        form' a0 /\\        form' a1) \\/   (?a0 a1.        a2 =        (\\a0 a1.             CONSTR             (SUC             (SUC             (SUC             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))))             (@v. T)             (FCONS a0 (FCONS a1 (\\n. BOTTOM))))        a0        a1 /\\        form' a0 /\\        form' a1) \\/   (?a. a2 =        (\\a. CONSTR             (SUC             (SUC             (SUC             (SUC             (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))))             (@v. T)             (FCONS a (\\n. BOTTOM)))        a /\\        form' a)   ==> nform' a2)\n             ==> nform' r) <=>\n        _dest_nform (_mk_nform r) = r)"
	fingerprint: 974260751661713058  
	conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (finite_product) (bool)) (bool)) !) (l (v (finite_product) a) (a (a (c (fun (finite_product) (fun (finite_product) (bool))) =) (a (c (fun (recspace (list (char))) (finite_product)) mk_finite_product) (a (c (fun (finite_product) (recspace (list (char)))) dest_finite_product) (v (finite_product) a)))) (v (finite_product) a))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) r) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) loop') (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) cc_v11') (a (c (fun (fun (fun (recspace (list (char))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (list (char))) (bool)) finite_product') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a0') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a0')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) cc_v11') (v (recspace (list (char))) a)))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a0')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) finite_product') (v (recspace (list (char))) a))))))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0')))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a1') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) a) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a1')) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a)))))))))) (a (v (fun (recspace (list (char))) (bool)) cc_v11') (v (recspace (list (char))) a1')))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) !) (l (v (recspace (list (char))) a2) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) a) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a0) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (v (recspace (list (char))) a0)) (v (recspace (list (char))) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a0))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a1))))))))) (a (c (fun (fun (recspace (list (char))) (bool)) (bool)) ?) (l (v (recspace (list (char))) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (v (recspace (list (char))) a2)) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (v (recspace (list (char))) a)))) (a (v (fun (recspace (list (char))) (bool)) loop') (v (recspace (list (char))) a)))))))))) (a (v (fun (recspace (list (char))) (bool)) finite_product') (v (recspace (list (char))) a2)))))))) (a (v (fun (recspace (list (char))) (bool)) finite_product') (v (recspace (list (char))) r)))))))))) (a (a (c (fun (recspace (list (char))) (fun (recspace (list (char))) (bool))) =) (a (c (fun (finite_product) (recspace (list (char)))) dest_finite_product) (a (c (fun (recspace (list (char))) (finite_product)) mk_finite_product) (v (recspace (list (char))) r)))) (v (recspace (list (char))) r))))))"
	tag: TYPE_DEFINITION
	type_definition {
		type_name: "finite_product"
		abs_name: "mk_finite_product"
		rep_name: "dest_finite_product"
		theorem_arg: 2627193184557133310 
	}
    library_tag: "c-fDL.ml"
} 
 
theorems {
	fingerprint: 1790618475581763056  
	conclusion: "(a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a) (a (c (fun (fun (fun (recspace (loop)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (loop)) (bool)) stable_sy') (a (c (fun (fun (fun (recspace (loop)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (loop)) (bool)) tri_sy') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) !) (l (v (recspace (loop)) a0') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (l (v (recspace (loop)) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))) (v (recspace (loop)) a)))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a1))))))))) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a))))))))))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0')))))) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) !) (l (v (recspace (loop)) a1') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (l (v (recspace (loop)) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))) (v (recspace (loop)) a)))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1))))))))) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a))))))))))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1'))))))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a)))))))))"
	tag: THEOREM
    training_split: TRAINING
    library_tag: "c-fDL.ml"
	pretty_printed: "|- ?a. !strF' strG'.\n           (!a0'. (?a. a0' = (\\a. CONSTR 0 a (\\n. BOTTOM)) a) \\/  (?a. a0' =       (\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM))) a /\\       strF' a) \\/  (?a0 a1.       a0' =       (\\a0 a1.            CONSTR (SUC (SUC 0)) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       strF' a0 /\\       strF' a1) \\/  (?a0 a1.       a0' =       (\\a0 a1.            CONSTR (SUC (SUC (SUC 0))) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       strF' a0 /\\       strG' a1) \\/  (?a0 a1.       a0' =       (\\a0 a1.            CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       strG' a0 /\\       strF' a1) \\/  (?a. a0' =       (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) a            (\\n. BOTTOM))       a)  ==> strF' a0') /\\\n           (!a1'. (?a. a1' =       (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0)))))) a            (\\n. BOTTOM))       a) \\/  (?a. a1' =       (\\a. CONSTR            (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))            (@v. T)            (FCONS a (\\n. BOTTOM)))       a /\\       strG' a) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR            (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))            (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       strG' a0 /\\       strG' a1) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR            (SUC            (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))            (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       strG' a0 /\\       strF' a1) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR            (SUC            (SUC            (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))))            (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       strF' a0 /\\       strG' a1) \\/  (?a. a1' =       (\\a. CONSTR            (SUC            (SUC            (SUC            (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))))            a            (\\n. BOTTOM))       a)  ==> strG' a1')\n           ==> strF' a"
	proof_function: "type_definition_helper"
}
theorems {
	pretty_printed: "|- (!a. _mk_strF (_dest_strF a) = a) /\\\n   (!r. (!strF' strG'.\n             (!a0'. (?a. a0' = (\\a. CONSTR 0 a (\\n. BOTTOM)) a) \\/    (?a. a0' =         (\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM)))         a /\\         strF' a) \\/    (?a0 a1.         a0' =         (\\a0 a1.              CONSTR (SUC (SUC 0)) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         strF' a0 /\\         strF' a1) \\/    (?a0 a1.         a0' =         (\\a0 a1.              CONSTR (SUC (SUC (SUC 0))) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         strF' a0 /\\         strG' a1) \\/    (?a0 a1.         a0' =         (\\a0 a1.              CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         strG' a0 /\\         strF' a1) \\/    (?a. a0' =         (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) a              (\\n. BOTTOM))         a)    ==> strF' a0') /\\\n             (!a1'. (?a. a1' =         (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0)))))) a              (\\n. BOTTOM))         a) \\/    (?a. a1' =         (\\a. CONSTR              (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))              (@v. T)              (FCONS a (\\n. BOTTOM)))         a /\\         strG' a) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR              (SUC              (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))              (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         strG' a0 /\\         strG' a1) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR              (SUC              (SUC              (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))              (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         strG' a0 /\\         strF' a1) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR              (SUC              (SUC              (SUC              (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))))              (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         strF' a0 /\\         strG' a1) \\/    (?a. a1' =         (\\a. CONSTR              (SUC              (SUC              (SUC              (SUC              (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))))              a              (\\n. BOTTOM))         a)    ==> strG' a1')\n             ==> strF' r) <=>\n        _dest_strF (_mk_strF r) = r)"
	fingerprint: 3443875945866033280  
	conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a) (a (a (c (fun (stable_sy) (fun (stable_sy) (bool))) =) (a (c (fun (recspace (loop)) (stable_sy)) stable_sy) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a)))) (v (stable_sy) a))))) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) !) (l (v (recspace (loop)) r) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (fun (fun (recspace (loop)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (loop)) (bool)) stable_sy') (a (c (fun (fun (fun (recspace (loop)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (loop)) (bool)) tri_sy') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) !) (l (v (recspace (loop)) a0') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (l (v (recspace (loop)) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))) (v (recspace (loop)) a)))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a1))))))))) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a))))))))))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0')))))) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) !) (l (v (recspace (loop)) a1') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (l (v (recspace (loop)) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))) (v (recspace (loop)) a)))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1))))))))) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a))))))))))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1'))))))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) r)))))))) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (a (c (fun (recspace (loop)) (stable_sy)) stable_sy) (v (recspace (loop)) r)))) (v (recspace (loop)) r))))))"
	tag: TYPE_DEFINITION
	type_definition {
		type_name: "stable_sy"
		abs_name: "stable_sy"
		rep_name: "tuple_stable_sy"
		theorem_arg: 1790618475581763056 
	}
    library_tag: "c-fDL.ml"
} 
 
theorems {
	fingerprint: 4441329791180300237  
	conclusion: "(a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a) (a (c (fun (fun (fun (recspace (loop)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (loop)) (bool)) stable_sy') (a (c (fun (fun (fun (recspace (loop)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (loop)) (bool)) tri_sy') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) !) (l (v (recspace (loop)) a0') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (l (v (recspace (loop)) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))) (v (recspace (loop)) a)))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a1))))))))) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a))))))))))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0')))))) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) !) (l (v (recspace (loop)) a1') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (l (v (recspace (loop)) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))) (v (recspace (loop)) a)))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1))))))))) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a))))))))))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1'))))))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a)))))))))"
	tag: THEOREM
    training_split: TRAINING
    library_tag: "c-fDL.ml"
	pretty_printed: "|- ?a. !strF' strG'.\n           (!a0'. (?a. a0' = (\\a. CONSTR 0 a (\\n. BOTTOM)) a) \\/  (?a. a0' =       (\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM))) a /\\       strF' a) \\/  (?a0 a1.       a0' =       (\\a0 a1.            CONSTR (SUC (SUC 0)) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       strF' a0 /\\       strF' a1) \\/  (?a0 a1.       a0' =       (\\a0 a1.            CONSTR (SUC (SUC (SUC 0))) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       strF' a0 /\\       strG' a1) \\/  (?a0 a1.       a0' =       (\\a0 a1.            CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       strG' a0 /\\       strF' a1) \\/  (?a. a0' =       (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) a            (\\n. BOTTOM))       a)  ==> strF' a0') /\\\n           (!a1'. (?a. a1' =       (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0)))))) a            (\\n. BOTTOM))       a) \\/  (?a. a1' =       (\\a. CONSTR            (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))            (@v. T)            (FCONS a (\\n. BOTTOM)))       a /\\       strG' a) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR            (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))            (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       strG' a0 /\\       strG' a1) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR            (SUC            (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))            (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       strG' a0 /\\       strF' a1) \\/  (?a0 a1.       a1' =       (\\a0 a1.            CONSTR            (SUC            (SUC            (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))))            (@v. T)            (FCONS a0 (FCONS a1 (\\n. BOTTOM))))       a0       a1 /\\       strF' a0 /\\       strG' a1) \\/  (?a. a1' =       (\\a. CONSTR            (SUC            (SUC            (SUC            (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))))            a            (\\n. BOTTOM))       a)  ==> strG' a1')\n           ==> strG' a"
	proof_function: "type_definition_helper"
}
theorems {
	pretty_printed: "|- (!a. _mk_strG (_dest_strG a) = a) /\\\n   (!r. (!strF' strG'.\n             (!a0'. (?a. a0' = (\\a. CONSTR 0 a (\\n. BOTTOM)) a) \\/    (?a. a0' =         (\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM)))         a /\\         strF' a) \\/    (?a0 a1.         a0' =         (\\a0 a1.              CONSTR (SUC (SUC 0)) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         strF' a0 /\\         strF' a1) \\/    (?a0 a1.         a0' =         (\\a0 a1.              CONSTR (SUC (SUC (SUC 0))) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         strF' a0 /\\         strG' a1) \\/    (?a0 a1.         a0' =         (\\a0 a1.              CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         strG' a0 /\\         strF' a1) \\/    (?a. a0' =         (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) a              (\\n. BOTTOM))         a)    ==> strF' a0') /\\\n             (!a1'. (?a. a1' =         (\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0)))))) a              (\\n. BOTTOM))         a) \\/    (?a. a1' =         (\\a. CONSTR              (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))              (@v. T)              (FCONS a (\\n. BOTTOM)))         a /\\         strG' a) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR              (SUC              (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))              (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         strG' a0 /\\         strG' a1) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR              (SUC              (SUC              (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))              (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         strG' a0 /\\         strF' a1) \\/    (?a0 a1.         a1' =         (\\a0 a1.              CONSTR              (SUC              (SUC              (SUC              (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))))              (@v. T)              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))         a0         a1 /\\         strF' a0 /\\         strG' a1) \\/    (?a. a1' =         (\\a. CONSTR              (SUC              (SUC              (SUC              (SUC              (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))))              a              (\\n. BOTTOM))         a)    ==> strG' a1')\n             ==> strG' r) <=>\n        _dest_strG (_mk_strG r) = r)"
	fingerprint: 1370725862293882794  
	conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a) (a (a (c (fun (tri_sy) (fun (tri_sy) (bool))) =) (a (c (fun (recspace (loop)) (tri_sy)) tri_sy) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a)))) (v (tri_sy) a))))) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) !) (l (v (recspace (loop)) r) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (fun (fun (recspace (loop)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (loop)) (bool)) stable_sy') (a (c (fun (fun (fun (recspace (loop)) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (loop)) (bool)) tri_sy') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) !) (l (v (recspace (loop)) a0') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (l (v (recspace (loop)) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))) (v (recspace (loop)) a)))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a1))))))))) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a0')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a))))))))))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0')))))) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) !) (l (v (recspace (loop)) a1') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (l (v (recspace (loop)) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))) (v (recspace (loop)) a)))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a0) (a (c (fun (fun (recspace (loop)) (bool)) (bool)) ?) (l (v (recspace (loop)) a1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (v (recspace (loop)) a0)) (v (recspace (loop)) a1)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (recspace (loop)) (bool)) stable_sy') (v (recspace (loop)) a0))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1))))))))) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) a) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (v (recspace (loop)) a1')) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a))))))))))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) a1'))))))) (a (v (fun (recspace (loop)) (bool)) tri_sy') (v (recspace (loop)) r)))))))) (a (a (c (fun (recspace (loop)) (fun (recspace (loop)) (bool))) =) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (a (c (fun (recspace (loop)) (tri_sy)) tri_sy) (v (recspace (loop)) r)))) (v (recspace (loop)) r))))))"
	tag: TYPE_DEFINITION
	type_definition {
		type_name: "tri_sy"
		abs_name: "tri_sy"
		rep_name: "tuple_tri_sy"
		theorem_arg: 4441329791180300237 
	}
    library_tag: "c-fDL.ml"
} 
 
theorems {
	fingerprint: 307508346377901639  
	conclusion: "(a (c (fun (fun (recspace (prod (stable_sy) (tri_sy))) (bool)) (bool)) ?) (l (v (recspace (prod (stable_sy) (tri_sy))) a) (a (c (fun (fun (fun (recspace (prod (stable_sy) (tri_sy))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (prod (stable_sy) (tri_sy))) (bool)) scs_v39') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (recspace (prod (stable_sy) (tri_sy))) (bool)) (bool)) !) (l (v (recspace (prod (stable_sy) (tri_sy))) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) a0) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) a1) (a (a (c (fun (recspace (prod (stable_sy) (tri_sy))) (fun (recspace (prod (stable_sy) (tri_sy))) (bool))) =) (v (recspace (prod (stable_sy) (tri_sy))) a)) (a (a (l (v (stable_sy) a0) (l (v (tri_sy) a1) (a (a (a (c (fun (num) (fun (prod (stable_sy) (tri_sy)) (fun (fun (num) (recspace (prod (stable_sy) (tri_sy)))) (recspace (prod (stable_sy) (tri_sy)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (a (c (fun (stable_sy) (fun (tri_sy) (prod (stable_sy) (tri_sy)))) ,) (v (stable_sy) a0)) (v (tri_sy) a1))) (l (v (num) n) (c (recspace (prod (stable_sy) (tri_sy))) BOTTOM))))) (v (stable_sy) a0)) (v (tri_sy) a1)))))))) (a (v (fun (recspace (prod (stable_sy) (tri_sy))) (bool)) scs_v39') (v (recspace (prod (stable_sy) (tri_sy))) a)))))) (a (v (fun (recspace (prod (stable_sy) (tri_sy))) (bool)) scs_v39') (v (recspace (prod (stable_sy) (tri_sy))) a)))))))"
	tag: THEOREM
    training_split: TRAINING
    library_tag: "c-fDL.ml"
	pretty_printed: "|- ?a. !seq'. (!a. (?a0 a1.        a = (\\a0 a1. CONSTR 0 (a0,a1) (\\n. BOTTOM)) a0 a1)   ==> seq' a)\n              ==> seq' a"
	proof_function: "type_definition_helper"
}
theorems {
	pretty_printed: "|- (!a. _mk_seq (_dest_seq a) = a) /\\\n   (!r. (!seq'. (!a. (?a0 a1.          a = (\\a0 a1. CONSTR 0 (a0,a1) (\\n. BOTTOM)) a0 a1)     ==> seq' a)\n                ==> seq' r) <=>\n        _dest_seq (_mk_seq r) = r)"
	fingerprint: 1194368629451720755  
	conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (scs_v39) (bool)) (bool)) !) (l (v (scs_v39) a) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (a (c (fun (recspace (prod (stable_sy) (tri_sy))) (scs_v39)) scs_v39) (a (c (fun (scs_v39) (recspace (prod (stable_sy) (tri_sy)))) dest_scs_v39) (v (scs_v39) a)))) (v (scs_v39) a))))) (a (c (fun (fun (recspace (prod (stable_sy) (tri_sy))) (bool)) (bool)) !) (l (v (recspace (prod (stable_sy) (tri_sy))) r) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (fun (fun (recspace (prod (stable_sy) (tri_sy))) (bool)) (bool)) (bool)) !) (l (v (fun (recspace (prod (stable_sy) (tri_sy))) (bool)) scs_v39') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (recspace (prod (stable_sy) (tri_sy))) (bool)) (bool)) !) (l (v (recspace (prod (stable_sy) (tri_sy))) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) a0) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) a1) (a (a (c (fun (recspace (prod (stable_sy) (tri_sy))) (fun (recspace (prod (stable_sy) (tri_sy))) (bool))) =) (v (recspace (prod (stable_sy) (tri_sy))) a)) (a (a (l (v (stable_sy) a0) (l (v (tri_sy) a1) (a (a (a (c (fun (num) (fun (prod (stable_sy) (tri_sy)) (fun (fun (num) (recspace (prod (stable_sy) (tri_sy)))) (recspace (prod (stable_sy) (tri_sy)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (a (c (fun (stable_sy) (fun (tri_sy) (prod (stable_sy) (tri_sy)))) ,) (v (stable_sy) a0)) (v (tri_sy) a1))) (l (v (num) n) (c (recspace (prod (stable_sy) (tri_sy))) BOTTOM))))) (v (stable_sy) a0)) (v (tri_sy) a1)))))))) (a (v (fun (recspace (prod (stable_sy) (tri_sy))) (bool)) scs_v39') (v (recspace (prod (stable_sy) (tri_sy))) a)))))) (a (v (fun (recspace (prod (stable_sy) (tri_sy))) (bool)) scs_v39') (v (recspace (prod (stable_sy) (tri_sy))) r)))))) (a (a (c (fun (recspace (prod (stable_sy) (tri_sy))) (fun (recspace (prod (stable_sy) (tri_sy))) (bool))) =) (a (c (fun (scs_v39) (recspace (prod (stable_sy) (tri_sy)))) dest_scs_v39) (a (c (fun (recspace (prod (stable_sy) (tri_sy))) (scs_v39)) scs_v39) (v (recspace (prod (stable_sy) (tri_sy))) r)))) (v (recspace (prod (stable_sy) (tri_sy))) r))))))"
	tag: TYPE_DEFINITION
	type_definition {
		type_name: "scs_v39"
		abs_name: "scs_v39"
		rep_name: "dest_scs_v39"
		theorem_arg: 307508346377901639 
	}
    library_tag: "c-fDL.ml"
} 










 
theorems {
	fingerprint: 3541860728450368123  
	conclusion: "(a (a (c (fun (fun (loop) (finite_product)) (fun (fun (loop) (finite_product)) (bool))) =) (c (fun (loop) (finite_product)) halfatn)) (l (v (loop) a) (a (c (fun (recspace (list (char))) (finite_product)) mk_finite_product) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (loop) (finite_product)) (fun (fun (loop) (finite_product)) (bool))) =) (v (fun (loop) (finite_product)) halfatn)) (l (v (loop) a) (a (c (fun (recspace (list (char))) (finite_product)) mk_finite_product) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a))))))"
		constants: "halfatn"
    }
    library_tag: "c-fDL.ml"
	pretty_printed: "|- || =\n   (\\a. _mk_nform\n        ((\\a. CONSTR\n              (SUC\n              (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))))\n              (@v. T)\n              (FCONS a (\\n. BOTTOM)))\n        (_dest_form a)))"
} 
 
theorems {
	fingerprint: 3845128166421279227  
	conclusion: "(a (a (c (fun (fun (finite_product) (loop)) (fun (fun (finite_product) (loop)) (bool))) =) (c (fun (finite_product) (loop)) plane_norm)) (l (v (finite_product) a) (a (c (fun (recspace (list (char))) (loop)) loop) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (a (c (fun (finite_product) (recspace (list (char)))) dest_finite_product) (v (finite_product) a))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (finite_product) (loop)) (fun (fun (finite_product) (loop)) (bool))) =) (v (fun (finite_product) (loop)) plane_norm)) (l (v (finite_product) a) (a (c (fun (recspace (list (char))) (loop)) loop) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (a (c (fun (finite_product) (recspace (list (char)))) dest_finite_product) (v (finite_product) a))))))"
		constants: "plane_norm"
    }
    library_tag: "c-fDL.ml"
	pretty_printed: "|- nn =\n   (\\a. _mk_form\n        ((\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM))) (_dest_nform a)))"
} 
 
theorems {
	fingerprint: 896665165887867911  
	conclusion: "(a (a (c (fun (fun (cc_v11) (loop)) (fun (fun (cc_v11) (loop)) (bool))) =) (c (fun (cc_v11) (loop)) plane)) (l (v (cc_v11) a) (a (c (fun (recspace (list (char))) (loop)) loop) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (a (c (fun (cc_v11) (recspace (list (char)))) pair_of_cc_v11) (v (cc_v11) a))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (cc_v11) (loop)) (fun (fun (cc_v11) (loop)) (bool))) =) (v (fun (cc_v11) (loop)) plane)) (l (v (cc_v11) a) (a (c (fun (recspace (list (char))) (loop)) loop) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (a (c (fun (cc_v11) (recspace (list (char)))) pair_of_cc_v11) (v (cc_v11) a))))))"
		constants: "plane"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- pp =\n   (\\a. _mk_form\n        ((\\a. CONSTR 0 (@v. T) (FCONS a (\\n. BOTTOM))) (_dest_pform a)))"
} 
 
theorems {
	fingerprint: 3003100755361677418  
	conclusion: "(a (a (c (fun (fun (tri_sy) (fun (stable_sy) (tri_sy))) (fun (fun (tri_sy) (fun (stable_sy) (tri_sy))) (bool))) =) (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:)) (l (v (tri_sy) a0) (l (v (stable_sy) a1) (a (c (fun (recspace (loop)) (tri_sy)) tri_sy) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a0))) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a1)))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (tri_sy) (fun (stable_sy) (tri_sy))) (fun (fun (tri_sy) (fun (stable_sy) (tri_sy))) (bool))) =) (v (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:)) (l (v (tri_sy) a0) (l (v (stable_sy) a1) (a (c (fun (recspace (loop)) (tri_sy)) tri_sy) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a0))) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a1)))))))"
		constants: "**:"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- /.^ =\n   (\\a0 a1.\n        _mk_strG\n        ((\\a0 a1.\n              CONSTR (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))\n              (@v. T)\n              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_strG a0)\n        (_dest_strF a1)))"
} 
 
theorems {
	fingerprint: 26857811557205160  
	conclusion: "(a (a (c (fun (fun (loop) (stable_sy)) (fun (fun (loop) (stable_sy)) (bool))) =) (c (fun (loop) (stable_sy)) mark_term)) (l (v (loop) a) (a (c (fun (recspace (loop)) (stable_sy)) stable_sy) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (loop) (stable_sy)) (fun (fun (loop) (stable_sy)) (bool))) =) (v (fun (loop) (stable_sy)) mark_term)) (l (v (loop) a) (a (c (fun (recspace (loop)) (stable_sy)) stable_sy) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))"
		constants: "mark_term"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- ff = (\\a. _mk_strF ((\\a. CONSTR 0 a (\\n. BOTTOM)) a))"
} 
 
theorems {
	fingerprint: 2123853867543201202  
	conclusion: "(a (a (c (fun (fun (stable_sy) (stable_sy)) (fun (fun (stable_sy) (stable_sy)) (bool))) =) (c (fun (stable_sy) (stable_sy)) twopow)) (l (v (stable_sy) a) (a (c (fun (recspace (loop)) (stable_sy)) stable_sy) (a (l (v (recspace (loop)) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (stable_sy) (stable_sy)) (fun (fun (stable_sy) (stable_sy)) (bool))) =) (v (fun (stable_sy) (stable_sy)) twopow)) (l (v (stable_sy) a) (a (c (fun (recspace (loop)) (stable_sy)) stable_sy) (a (l (v (recspace (loop)) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a))))))"
		constants: "twopow"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- <>^ =\n   (\\a. _mk_strF\n        ((\\a. CONSTR (SUC 0) (@v. T) (FCONS a (\\n. BOTTOM))) (_dest_strF a)))"
} 
 
theorems {
	fingerprint: 2737401908254037507  
	conclusion: "(a (a (c (fun (fun (loop) (tri_sy)) (fun (fun (loop) (tri_sy)) (bool))) =) (c (fun (loop) (tri_sy)) TAGB)) (l (v (loop) a) (a (c (fun (recspace (loop)) (tri_sy)) tri_sy) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (loop) (tri_sy)) (fun (fun (loop) (tri_sy)) (bool))) =) (v (fun (loop) (tri_sy)) TAGB)) (l (v (loop) a) (a (c (fun (recspace (loop)) (tri_sy)) tri_sy) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))"
		constants: "TAGB"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- gg =\n   (\\a. _mk_strG\n        ((\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0)))))) a (\\n. BOTTOM)) a))"
} 
 
theorems {
	fingerprint: 4456907157744225296  
	conclusion: "(a (a (c (fun (fun (stable_sy) (fun (tri_sy) (stable_sy))) (fun (fun (stable_sy) (fun (tri_sy) (stable_sy))) (bool))) =) (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:)) (l (v (stable_sy) a0) (l (v (tri_sy) a1) (a (c (fun (recspace (loop)) (stable_sy)) stable_sy) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a0))) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a1)))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (stable_sy) (fun (tri_sy) (stable_sy))) (fun (fun (stable_sy) (fun (tri_sy) (stable_sy))) (bool))) =) (v (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:)) (l (v (stable_sy) a0) (l (v (tri_sy) a1) (a (c (fun (recspace (loop)) (stable_sy)) stable_sy) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a0))) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a1)))))))"
		constants: "-:"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- /-^ =\n   (\\a0 a1.\n        _mk_strF\n        ((\\a0 a1.\n              CONSTR (SUC (SUC (SUC 0))) (@v. T)\n              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_strF a0)\n        (_dest_strG a1)))"
} 
 
theorems {
	fingerprint: 4299900667533986044  
	conclusion: "(a (a (c (fun (fun (loop) (fun (loop) (finite_product))) (fun (fun (loop) (fun (loop) (finite_product))) (bool))) =) (c (fun (loop) (fun (loop) (finite_product))) +.)) (l (v (loop) a0) (l (v (loop) a1) (a (c (fun (recspace (list (char))) (finite_product)) mk_finite_product) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a0))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a1)))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (loop) (fun (loop) (finite_product))) (fun (fun (loop) (fun (loop) (finite_product))) (bool))) =) (v (fun (loop) (fun (loop) (finite_product))) +.)) (l (v (loop) a0) (l (v (loop) a1) (a (c (fun (recspace (list (char))) (finite_product)) mk_finite_product) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a0))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a1)))))))"
		constants: "+."
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- ## =\n   (\\a0 a1.\n        _mk_nform\n        ((\\a0 a1.\n              CONSTR (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))\n              (@v. T)\n              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_form a0)\n        (_dest_form a1)))"
} 
 
theorems {
	fingerprint: 3422230729103508810  
	conclusion: "(a (a (c (fun (fun (tri_sy) (tri_sy)) (fun (fun (tri_sy) (tri_sy)) (bool))) =) (c (fun (tri_sy) (tri_sy)) halfatn4)) (l (v (tri_sy) a) (a (c (fun (recspace (loop)) (tri_sy)) tri_sy) (a (l (v (recspace (loop)) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (tri_sy) (tri_sy)) (fun (fun (tri_sy) (tri_sy)) (bool))) =) (v (fun (tri_sy) (tri_sy)) halfatn4)) (l (v (tri_sy) a) (a (c (fun (recspace (loop)) (tri_sy)) tri_sy) (a (l (v (recspace (loop)) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a))))))"
		constants: "halfatn4"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- ||^ =\n   (\\a. _mk_strG\n        ((\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))) (@v. T)\n              (FCONS a (\\n. BOTTOM)))\n        (_dest_strG a)))"
} 
 
theorems {
	fingerprint: 4033693547773753175  
	conclusion: "(a (a (c (fun (fun (tri_sy) (fun (stable_sy) (stable_sy))) (fun (fun (tri_sy) (fun (stable_sy) (stable_sy))) (bool))) =) (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^)) (l (v (tri_sy) a0) (l (v (stable_sy) a1) (a (c (fun (recspace (loop)) (stable_sy)) stable_sy) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a0))) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a1)))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (tri_sy) (fun (stable_sy) (stable_sy))) (fun (fun (tri_sy) (fun (stable_sy) (stable_sy))) (bool))) =) (v (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^)) (l (v (tri_sy) a0) (l (v (stable_sy) a1) (a (c (fun (recspace (loop)) (stable_sy)) stable_sy) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a0))) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a1)))))))"
		constants: "-|^"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- \\-^ =\n   (\\a0 a1.\n        _mk_strF\n        ((\\a0 a1.\n              CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)\n              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_strG a0)\n        (_dest_strF a1)))"
} 
 
theorems {
	fingerprint: 2985688463776157759  
	conclusion: "(a (a (c (fun (fun (loop) (fun (loop) (finite_product))) (fun (fun (loop) (fun (loop) (finite_product))) (bool))) =) (c (fun (loop) (fun (loop) (finite_product))) **.)) (l (v (loop) a0) (l (v (loop) a1) (a (c (fun (recspace (list (char))) (finite_product)) mk_finite_product) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a0))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a1)))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (loop) (fun (loop) (finite_product))) (fun (fun (loop) (fun (loop) (finite_product))) (bool))) =) (v (fun (loop) (fun (loop) (finite_product))) **.)) (l (v (loop) a0) (l (v (loop) a1) (a (c (fun (recspace (list (char))) (finite_product)) mk_finite_product) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a0))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a1)))))))"
		constants: "**."
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- /. =\n   (\\a0 a1.\n        _mk_nform\n        ((\\a0 a1.\n              CONSTR\n              (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))))\n              (@v. T)\n              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_form a0)\n        (_dest_form a1)))"
} 
 
theorems {
	fingerprint: 4525547488981888682  
	conclusion: "(a (a (c (fun (fun (loop) (fun (loop) (cc_v11))) (fun (fun (loop) (fun (loop) (cc_v11))) (bool))) =) (c (fun (loop) (fun (loop) (cc_v11))) -.)) (l (v (loop) a0) (l (v (loop) a1) (a (c (fun (recspace (list (char))) (cc_v11)) cc_v11) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a0))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a1)))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (loop) (fun (loop) (cc_v11))) (fun (fun (loop) (fun (loop) (cc_v11))) (bool))) =) (v (fun (loop) (fun (loop) (cc_v11))) -.)) (l (v (loop) a0) (l (v (loop) a1) (a (c (fun (recspace (list (char))) (cc_v11)) cc_v11) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a0))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a1)))))))"
		constants: "-."
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- /- =\n   (\\a0 a1.\n        _mk_pform\n        ((\\a0 a1.\n              CONSTR (SUC (SUC (SUC (SUC 0)))) (@v. T)\n              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_form a0)\n        (_dest_form a1)))"
} 
 
theorems {
	fingerprint: 715851847467900231  
	conclusion: "(a (a (c (fun (fun (list (char)) (cc_v11)) (fun (fun (list (char)) (cc_v11)) (bool))) =) (c (fun (list (char)) (cc_v11)) drop0)) (l (v (list (char)) a) (a (c (fun (recspace (list (char))) (cc_v11)) cc_v11) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (list (char)) (cc_v11)) (fun (fun (list (char)) (cc_v11)) (bool))) =) (v (fun (list (char)) (cc_v11)) drop0)) (l (v (list (char)) a) (a (c (fun (recspace (list (char))) (cc_v11)) cc_v11) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))"
		constants: "drop0"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- pAtom = (\\a. _mk_pform ((\\a. CONSTR (SUC (SUC 0)) a (\\n. BOTTOM)) a))"
} 
 
theorems {
	fingerprint: 1003439023960552299  
	conclusion: "(a (a (c (fun (fun (num) (hypermap)) (fun (fun (num) (hypermap)) (bool))) =) (c (fun (num) (hypermap)) nabs)) (l (v (num) a) (a (c (fun (recspace (num)) (hypermap)) hypermap) (a (l (v (num) a) (a (a (a (c (fun (num) (fun (num) (fun (fun (num) (recspace (num))) (recspace (num))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (num) a)) (l (v (num) n) (c (recspace (num)) BOTTOM)))) (v (num) a)))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (num) (hypermap)) (fun (fun (num) (hypermap)) (bool))) =) (v (fun (num) (hypermap)) nabs)) (l (v (num) a) (a (c (fun (recspace (num)) (hypermap)) hypermap) (a (l (v (num) a) (a (a (a (c (fun (num) (fun (num) (fun (fun (num) (recspace (num))) (recspace (num))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (v (num) a)) (l (v (num) n) (c (recspace (num)) BOTTOM)))) (v (num) a)))))"
		constants: "nabs"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- String = (\\a. _mk_string ((\\a. CONSTR 0 a (\\n. BOTTOM)) a))"
} 
 
theorems {
	fingerprint: 2861812362545139993  
	conclusion: "(a (a (c (fun (fun (stable_sy) (fun (tri_sy) (tri_sy))) (fun (fun (stable_sy) (fun (tri_sy) (tri_sy))) (bool))) =) (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|)) (l (v (stable_sy) a0) (l (v (tri_sy) a1) (a (c (fun (recspace (loop)) (tri_sy)) tri_sy) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a0))) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a1)))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (stable_sy) (fun (tri_sy) (tri_sy))) (fun (fun (stable_sy) (fun (tri_sy) (tri_sy))) (bool))) =) (v (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|)) (l (v (stable_sy) a0) (l (v (tri_sy) a1) (a (c (fun (recspace (loop)) (tri_sy)) tri_sy) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a0))) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a1)))))))"
		constants: "**|"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- \\.^ =\n   (\\a0 a1.\n        _mk_strG\n        ((\\a0 a1.\n              CONSTR\n              (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))))\n              (@v. T)\n              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_strF a0)\n        (_dest_strG a1)))"
} 
 
theorems {
	fingerprint: 1096178448035526683  
	conclusion: "(a (a (c (fun (fun (loop) (stable_sy)) (fun (fun (loop) (stable_sy)) (bool))) =) (c (fun (loop) (stable_sy)) drop2)) (l (v (loop) a) (a (c (fun (recspace (loop)) (stable_sy)) stable_sy) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (loop) (stable_sy)) (fun (fun (loop) (stable_sy)) (bool))) =) (v (fun (loop) (stable_sy)) drop2)) (l (v (loop) a) (a (c (fun (recspace (loop)) (stable_sy)) stable_sy) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))"
		constants: "drop2"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- focf =\n   (\\a. _mk_strF\n        ((\\a. CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) a (\\n. BOTTOM)) a))"
} 
 
theorems {
	fingerprint: 2426402535844639594  
	conclusion: "(a (a (c (fun (fun (loop) (fun (loop) (cc_v11))) (fun (fun (loop) (fun (loop) (cc_v11))) (bool))) =) (c (fun (loop) (fun (loop) (cc_v11))) *.)) (l (v (loop) a0) (l (v (loop) a1) (a (c (fun (recspace (list (char))) (cc_v11)) cc_v11) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a0))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a1)))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (loop) (fun (loop) (cc_v11))) (fun (fun (loop) (fun (loop) (cc_v11))) (bool))) =) (v (fun (loop) (fun (loop) (cc_v11))) *.)) (l (v (loop) a0) (l (v (loop) a1) (a (c (fun (recspace (list (char))) (cc_v11)) cc_v11) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a0))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a1)))))))"
		constants: "*."
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- (**) =\n   (\\a0 a1.\n        _mk_pform\n        ((\\a0 a1.\n              CONSTR (SUC (SUC (SUC 0))) (@v. T)\n              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_form a0)\n        (_dest_form a1)))"
} 
 
theorems {
	fingerprint: 699056073282616836  
	conclusion: "(a (a (c (fun (fun (stable_sy) (fun (tri_sy) (scs_v39))) (fun (fun (stable_sy) (fun (tri_sy) (scs_v39))) (bool))) =) (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.)) (l (v (stable_sy) a0) (l (v (tri_sy) a1) (a (c (fun (recspace (prod (stable_sy) (tri_sy))) (scs_v39)) scs_v39) (a (a (l (v (stable_sy) a0) (l (v (tri_sy) a1) (a (a (a (c (fun (num) (fun (prod (stable_sy) (tri_sy)) (fun (fun (num) (recspace (prod (stable_sy) (tri_sy)))) (recspace (prod (stable_sy) (tri_sy)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (a (c (fun (stable_sy) (fun (tri_sy) (prod (stable_sy) (tri_sy)))) ,) (v (stable_sy) a0)) (v (tri_sy) a1))) (l (v (num) n) (c (recspace (prod (stable_sy) (tri_sy))) BOTTOM))))) (v (stable_sy) a0)) (v (tri_sy) a1))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (stable_sy) (fun (tri_sy) (scs_v39))) (fun (fun (stable_sy) (fun (tri_sy) (scs_v39))) (bool))) =) (v (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.)) (l (v (stable_sy) a0) (l (v (tri_sy) a1) (a (c (fun (recspace (prod (stable_sy) (tri_sy))) (scs_v39)) scs_v39) (a (a (l (v (stable_sy) a0) (l (v (tri_sy) a1) (a (a (a (c (fun (num) (fun (prod (stable_sy) (tri_sy)) (fun (fun (num) (recspace (prod (stable_sy) (tri_sy)))) (recspace (prod (stable_sy) (tri_sy)))))) CONSTR) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))) (a (a (c (fun (stable_sy) (fun (tri_sy) (prod (stable_sy) (tri_sy)))) ,) (v (stable_sy) a0)) (v (tri_sy) a1))) (l (v (num) n) (c (recspace (prod (stable_sy) (tri_sy))) BOTTOM))))) (v (stable_sy) a0)) (v (tri_sy) a1))))))"
		constants: "<=."
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- --> = (\\a0 a1. _mk_seq ((\\a0 a1. CONSTR 0 (a0,a1) (\\n. BOTTOM)) a0 a1))"
} 
 
theorems {
	fingerprint: 414711637860548073  
	conclusion: "(a (a (c (fun (fun (tri_sy) (fun (tri_sy) (tri_sy))) (fun (fun (tri_sy) (fun (tri_sy) (tri_sy))) (bool))) =) (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:)) (l (v (tri_sy) a0) (l (v (tri_sy) a1) (a (c (fun (recspace (loop)) (tri_sy)) tri_sy) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a0))) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a1)))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (tri_sy) (fun (tri_sy) (tri_sy))) (fun (fun (tri_sy) (fun (tri_sy) (tri_sy))) (bool))) =) (v (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:)) (l (v (tri_sy) a0) (l (v (tri_sy) a1) (a (c (fun (recspace (loop)) (tri_sy)) tri_sy) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a0))) (a (c (fun (tri_sy) (recspace (loop))) tuple_tri_sy) (v (tri_sy) a1)))))))"
		constants: "+:"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- ##^ =\n   (\\a0 a1.\n        _mk_strG\n        ((\\a0 a1.\n              CONSTR (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))))\n              (@v. T)\n              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_strG a0)\n        (_dest_strG a1)))"
} 
 
theorems {
	fingerprint: 4399134313084249092  
	conclusion: "(a (a (c (fun (fun (stable_sy) (fun (stable_sy) (stable_sy))) (fun (fun (stable_sy) (fun (stable_sy) (stable_sy))) (bool))) =) (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:)) (l (v (stable_sy) a0) (l (v (stable_sy) a1) (a (c (fun (recspace (loop)) (stable_sy)) stable_sy) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a0))) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a1)))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (stable_sy) (fun (stable_sy) (stable_sy))) (fun (fun (stable_sy) (fun (stable_sy) (stable_sy))) (bool))) =) (v (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:)) (l (v (stable_sy) a0) (l (v (stable_sy) a1) (a (c (fun (recspace (loop)) (stable_sy)) stable_sy) (a (a (l (v (recspace (loop)) a0) (l (v (recspace (loop)) a1) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))) (a (c (fun (fun (loop) (bool)) (loop)) @) (l (v (loop) v) (c (bool) T)))) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a0)) (a (a (c (fun (recspace (loop)) (fun (fun (num) (recspace (loop))) (fun (num) (recspace (loop))))) FCONS) (v (recspace (loop)) a1)) (l (v (num) n) (c (recspace (loop)) BOTTOM))))))) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a0))) (a (c (fun (stable_sy) (recspace (loop))) tuple_stable_sy) (v (stable_sy) a1)))))))"
		constants: "*:"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- **^ =\n   (\\a0 a1.\n        _mk_strF\n        ((\\a0 a1.\n              CONSTR (SUC (SUC 0)) (@v. T) (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_strF a0)\n        (_dest_strF a1)))"
} 
 
theorems {
	fingerprint: 597739868115635641  
	conclusion: "(a (a (c (fun (fun (loop) (cc_v11)) (fun (fun (loop) (cc_v11)) (bool))) =) (c (fun (loop) (cc_v11)) ssqrt)) (l (v (loop) a) (a (c (fun (recspace (list (char))) (cc_v11)) cc_v11) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (loop) (cc_v11)) (fun (fun (loop) (cc_v11)) (bool))) =) (v (fun (loop) (cc_v11)) ssqrt)) (l (v (loop) a) (a (c (fun (recspace (list (char))) (cc_v11)) cc_v11) (a (l (v (recspace (list (char))) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a))))))"
		constants: "ssqrt"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- <> =\n   (\\a. _mk_pform\n        ((\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC 0)))))) (@v. T)\n              (FCONS a (\\n. BOTTOM)))\n        (_dest_form a)))"
} 
 
theorems {
	fingerprint: 1994741430946139450  
	conclusion: "(a (a (c (fun (fun (loop) (fun (loop) (cc_v11))) (fun (fun (loop) (fun (loop) (cc_v11))) (bool))) =) (c (fun (loop) (fun (loop) (cc_v11))) -|)) (l (v (loop) a0) (l (v (loop) a1) (a (c (fun (recspace (list (char))) (cc_v11)) cc_v11) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a0))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a1)))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (loop) (fun (loop) (cc_v11))) (fun (fun (loop) (fun (loop) (cc_v11))) (bool))) =) (v (fun (loop) (fun (loop) (cc_v11))) -|)) (l (v (loop) a0) (l (v (loop) a1) (a (c (fun (recspace (list (char))) (cc_v11)) cc_v11) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a0))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a1)))))))"
		constants: "-|"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- \\- =\n   (\\a0 a1.\n        _mk_pform\n        ((\\a0 a1.\n              CONSTR (SUC (SUC (SUC (SUC (SUC 0))))) (@v. T)\n              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_form a0)\n        (_dest_form a1)))"
} 
 
theorems {
	fingerprint: 1389253615053732677  
	conclusion: "(a (a (c (fun (fun (loop) (tri_sy)) (fun (fun (loop) (tri_sy)) (bool))) =) (c (fun (loop) (tri_sy)) drop3)) (l (v (loop) a) (a (c (fun (recspace (loop)) (tri_sy)) tri_sy) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (loop) (tri_sy)) (fun (fun (loop) (tri_sy)) (bool))) =) (v (fun (loop) (tri_sy)) drop3)) (l (v (loop) a) (a (c (fun (recspace (loop)) (tri_sy)) tri_sy) (a (l (v (loop) a) (a (a (a (c (fun (num) (fun (loop) (fun (fun (num) (recspace (loop))) (recspace (loop))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))))) (v (loop) a)) (l (v (num) n) (c (recspace (loop)) BOTTOM)))) (v (loop) a)))))"
		constants: "drop3"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- focg =\n   (\\a. _mk_strG\n        ((\\a. CONSTR\n              (SUC\n              (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))))\n              a\n              (\\n. BOTTOM))\n        a))"
} 
 
theorems {
	fingerprint: 4404132260589875020  
	conclusion: "(a (a (c (fun (fun (loop) (fun (loop) (finite_product))) (fun (fun (loop) (fun (loop) (finite_product))) (bool))) =) (c (fun (loop) (fun (loop) (finite_product))) *|)) (l (v (loop) a0) (l (v (loop) a1) (a (c (fun (recspace (list (char))) (finite_product)) mk_finite_product) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a0))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a1)))))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (loop) (fun (loop) (finite_product))) (fun (fun (loop) (fun (loop) (finite_product))) (bool))) =) (v (fun (loop) (fun (loop) (finite_product))) *|)) (l (v (loop) a0) (l (v (loop) a1) (a (c (fun (recspace (list (char))) (finite_product)) mk_finite_product) (a (a (l (v (recspace (list (char))) a0) (l (v (recspace (list (char))) a1) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))))) (a (c (fun (fun (list (char)) (bool)) (list (char))) @) (l (v (list (char)) v) (c (bool) T)))) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a0)) (a (a (c (fun (recspace (list (char))) (fun (fun (num) (recspace (list (char)))) (fun (num) (recspace (list (char)))))) FCONS) (v (recspace (list (char))) a1)) (l (v (num) n) (c (recspace (list (char))) BOTTOM))))))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a0))) (a (c (fun (loop) (recspace (list (char)))) tuple_loop) (v (loop) a1)))))))"
		constants: "*|"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- \\. =\n   (\\a0 a1.\n        _mk_nform\n        ((\\a0 a1.\n              CONSTR (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0)))))))))\n              (@v. T)\n              (FCONS a0 (FCONS a1 (\\n. BOTTOM))))\n         (_dest_form a0)\n        (_dest_form a1)))"
} 
 
theorems {
	fingerprint: 4334827084465695713  
	conclusion: "(a (a (c (fun (fun (list (char)) (finite_product)) (fun (fun (list (char)) (finite_product)) (bool))) =) (c (fun (list (char)) (finite_product)) drop1)) (l (v (list (char)) a) (a (c (fun (recspace (list (char))) (finite_product)) mk_finite_product) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))"
	tag: DEFINITION
	definition {
		definition_type: "DRULE" 
		definition_term: "(a (a (c (fun (fun (list (char)) (finite_product)) (fun (fun (list (char)) (finite_product)) (bool))) =) (v (fun (list (char)) (finite_product)) drop1)) (l (v (list (char)) a) (a (c (fun (recspace (list (char))) (finite_product)) mk_finite_product) (a (l (v (list (char)) a) (a (a (a (c (fun (num) (fun (list (char)) (fun (fun (num) (recspace (list (char)))) (recspace (list (char)))))) CONSTR) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) SUC) (a (c (fun (num) (num)) NUMERAL) (c (num) _0)))))))))) (v (list (char)) a)) (l (v (num) n) (c (recspace (list (char))) BOTTOM)))) (v (list (char)) a)))))"
		constants: "drop1"
    }
	library_tag: "c-fDL.ml"
	pretty_printed: "|- nAtom =\n   (\\a. _mk_nform\n        ((\\a. CONSTR (SUC (SUC (SUC (SUC (SUC (SUC (SUC 0))))))) a\n              (\\n. BOTTOM))\n        a))"
}








theorems {
  conclusion:  "(a (c (fun (fun (fun (hypermap) (bool)) (bool)) (bool)) !) (l (v (fun (hypermap) (bool)) P) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (num) (bool)) (bool)) !) (l (v (num) a) (a (v (fun (hypermap) (bool)) P) (a (c (fun (num) (hypermap)) nabs) (v (num) a)))))) (a (c (fun (fun (hypermap) (bool)) (bool)) !) (l (v (hypermap) x) (a (v (fun (hypermap) (bool)) P) (v (hypermap) x)))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 2020290261130128800
  library_tag: "c-fDL.ml"
  pretty_printed: "|- !P. (!a. P (String a)) ==> (!x. P x)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2020290261130128800
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (num) Z) (bool)) (bool)) !) (l (v (fun (num) Z) f) (a (c (fun (fun (fun (hypermap) Z) (bool)) (bool)) ?) (l (v (fun (hypermap) Z) fn) (a (c (fun (fun (num) (bool)) (bool)) !) (l (v (num) a) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (hypermap) Z) fn) (a (c (fun (num) (hypermap)) nabs) (v (num) a)))) (a (v (fun (num) Z) f) (v (num) a)))))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 3546939580232206813
  library_tag: "c-fDL.ml"
  pretty_printed: "|- !f. ?fn. !a. fn (String a) = f a"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 3546939580232206813
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (loop) (bool)) (bool)) (bool)) !) (l (v (fun (loop) (bool)) P0) (a (c (fun (fun (fun (cc_v11) (bool)) (bool)) (bool)) !) (l (v (fun (cc_v11) (bool)) P1) (a (c (fun (fun (fun (finite_product) (bool)) (bool)) (bool)) !) (l (v (fun (finite_product) (bool)) P2) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (cc_v11) (bool)) (bool)) !) (l (v (cc_v11) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (cc_v11) (bool)) P1) (v (cc_v11) a))) (a (v (fun (loop) (bool)) P0) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) a))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (finite_product) (bool)) (bool)) !) (l (v (finite_product) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (finite_product) (bool)) P2) (v (finite_product) a))) (a (v (fun (loop) (bool)) P0) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) a))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) a) (a (v (fun (cc_v11) (bool)) P1) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a0) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (loop) (bool)) P0) (v (loop) a0))) (a (v (fun (loop) (bool)) P0) (v (loop) a1)))) (a (v (fun (cc_v11) (bool)) P1) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) a0)) (v (loop) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a0) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (loop) (bool)) P0) (v (loop) a0))) (a (v (fun (loop) (bool)) P0) (v (loop) a1)))) (a (v (fun (cc_v11) (bool)) P1) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) a0)) (v (loop) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a0) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (loop) (bool)) P0) (v (loop) a0))) (a (v (fun (loop) (bool)) P0) (v (loop) a1)))) (a (v (fun (cc_v11) (bool)) P1) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) a0)) (v (loop) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (loop) (bool)) P0) (v (loop) a))) (a (v (fun (cc_v11) (bool)) P1) (a (c (fun (loop) (cc_v11)) ssqrt) (v (loop) a))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) a) (a (v (fun (finite_product) (bool)) P2) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a0) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (loop) (bool)) P0) (v (loop) a0))) (a (v (fun (loop) (bool)) P0) (v (loop) a1)))) (a (v (fun (finite_product) (bool)) P2) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) a0)) (v (loop) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a0) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (loop) (bool)) P0) (v (loop) a0))) (a (v (fun (loop) (bool)) P0) (v (loop) a1)))) (a (v (fun (finite_product) (bool)) P2) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) a0)) (v (loop) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a0) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (loop) (bool)) P0) (v (loop) a0))) (a (v (fun (loop) (bool)) P0) (v (loop) a1)))) (a (v (fun (finite_product) (bool)) P2) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) a0)) (v (loop) a1))))))))) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (loop) (bool)) P0) (v (loop) a))) (a (v (fun (finite_product) (bool)) P2) (a (c (fun (loop) (finite_product)) halfatn) (v (loop) a)))))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) x0) (a (v (fun (loop) (bool)) P0) (v (loop) x0))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (cc_v11) (bool)) (bool)) !) (l (v (cc_v11) x1) (a (v (fun (cc_v11) (bool)) P1) (v (cc_v11) x1))))) (a (c (fun (fun (finite_product) (bool)) (bool)) !) (l (v (finite_product) x2) (a (v (fun (finite_product) (bool)) P2) (v (finite_product) x2)))))))))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 832597462361386262
  library_tag: "c-fDL.ml"
  pretty_printed: "|- !P0 P1 P2.         (!a. P1 a ==> P0 (pp a)) /\         (!a. P2 a ==> P0 (nn a)) /\         (!a. P1 (pAtom a)) /\         (!a0 a1. P0 a0 /\ P0 a1 ==> P1 (a0 ** a1)) /\         (!a0 a1. P0 a0 /\ P0 a1 ==> P1 (a0 /- a1)) /\         (!a0 a1. P0 a0 /\ P0 a1 ==> P1 (a0 \- a1)) /\         (!a. P0 a ==> P1 (<>a)) /\         (!a. P2 (nAtom a)) /\         (!a0 a1. P0 a0 /\ P0 a1 ==> P2 (a0 ## a1)) /\         (!a0 a1. P0 a0 /\ P0 a1 ==> P2 (a0 \. a1)) /\         (!a0 a1. P0 a0 /\ P0 a1 ==> P2 (a0 /. a1)) /\         (!a. P0 a ==> P2 (||a))         ==> (!x0. P0 x0) /\ (!x1. P1 x1) /\ (!x2. P2 x2)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 832597462361386262
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (cc_v11) (fun Z2 Z0)) (bool)) (bool)) !) (l (v (fun (cc_v11) (fun Z2 Z0)) f0) (a (c (fun (fun (fun (finite_product) (fun Z1 Z0)) (bool)) (bool)) !) (l (v (fun (finite_product) (fun Z1 Z0)) f1) (a (c (fun (fun (fun (list (char)) Z2) (bool)) (bool)) !) (l (v (fun (list (char)) Z2) f2) (a (c (fun (fun (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z2)))) (bool)) (bool)) !) (l (v (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z2)))) f3) (a (c (fun (fun (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z2)))) (bool)) (bool)) !) (l (v (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z2)))) f4) (a (c (fun (fun (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z2)))) (bool)) (bool)) !) (l (v (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z2)))) f5) (a (c (fun (fun (fun (loop) (fun Z0 Z2)) (bool)) (bool)) !) (l (v (fun (loop) (fun Z0 Z2)) f6) (a (c (fun (fun (fun (list (char)) Z1) (bool)) (bool)) !) (l (v (fun (list (char)) Z1) f7) (a (c (fun (fun (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z1)))) (bool)) (bool)) !) (l (v (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z1)))) f8) (a (c (fun (fun (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z1)))) (bool)) (bool)) !) (l (v (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z1)))) f9) (a (c (fun (fun (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z1)))) (bool)) (bool)) !) (l (v (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z1)))) f10) (a (c (fun (fun (fun (loop) (fun Z0 Z1)) (bool)) (bool)) !) (l (v (fun (loop) (fun Z0 Z1)) f11) (a (c (fun (fun (fun (loop) Z0) (bool)) (bool)) ?) (l (v (fun (loop) Z0) fn0) (a (c (fun (fun (fun (finite_product) Z1) (bool)) (bool)) ?) (l (v (fun (finite_product) Z1) fn1) (a (c (fun (fun (fun (cc_v11) Z2) (bool)) (bool)) ?) (l (v (fun (cc_v11) Z2) fn2) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (cc_v11) (bool)) (bool)) !) (l (v (cc_v11) a) (a (a (c (fun Z0 (fun Z0 (bool))) =) (a (v (fun (loop) Z0) fn0) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) a)))) (a (a (v (fun (cc_v11) (fun Z2 Z0)) f0) (v (cc_v11) a)) (a (v (fun (cc_v11) Z2) fn2) (v (cc_v11) a))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (finite_product) (bool)) (bool)) !) (l (v (finite_product) a) (a (a (c (fun Z0 (fun Z0 (bool))) =) (a (v (fun (loop) Z0) fn0) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) a)))) (a (a (v (fun (finite_product) (fun Z1 Z0)) f1) (v (finite_product) a)) (a (v (fun (finite_product) Z1) fn1) (v (finite_product) a))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) a) (a (a (c (fun Z2 (fun Z2 (bool))) =) (a (v (fun (cc_v11) Z2) fn2) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) a)))) (a (v (fun (list (char)) Z2) f2) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a0) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a1) (a (a (c (fun Z2 (fun Z2 (bool))) =) (a (v (fun (cc_v11) Z2) fn2) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) a0)) (v (loop) a1)))) (a (a (a (a (v (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z2)))) f3) (v (loop) a0)) (v (loop) a1)) (a (v (fun (loop) Z0) fn0) (v (loop) a0))) (a (v (fun (loop) Z0) fn0) (v (loop) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a0) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a1) (a (a (c (fun Z2 (fun Z2 (bool))) =) (a (v (fun (cc_v11) Z2) fn2) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) a0)) (v (loop) a1)))) (a (a (a (a (v (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z2)))) f4) (v (loop) a0)) (v (loop) a1)) (a (v (fun (loop) Z0) fn0) (v (loop) a0))) (a (v (fun (loop) Z0) fn0) (v (loop) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a0) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a1) (a (a (c (fun Z2 (fun Z2 (bool))) =) (a (v (fun (cc_v11) Z2) fn2) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) a0)) (v (loop) a1)))) (a (a (a (a (v (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z2)))) f5) (v (loop) a0)) (v (loop) a1)) (a (v (fun (loop) Z0) fn0) (v (loop) a0))) (a (v (fun (loop) Z0) fn0) (v (loop) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a) (a (a (c (fun Z2 (fun Z2 (bool))) =) (a (v (fun (cc_v11) Z2) fn2) (a (c (fun (loop) (cc_v11)) ssqrt) (v (loop) a)))) (a (a (v (fun (loop) (fun Z0 Z2)) f6) (v (loop) a)) (a (v (fun (loop) Z0) fn0) (v (loop) a))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) a) (a (a (c (fun Z1 (fun Z1 (bool))) =) (a (v (fun (finite_product) Z1) fn1) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) a)))) (a (v (fun (list (char)) Z1) f7) (v (list (char)) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a0) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a1) (a (a (c (fun Z1 (fun Z1 (bool))) =) (a (v (fun (finite_product) Z1) fn1) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) a0)) (v (loop) a1)))) (a (a (a (a (v (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z1)))) f8) (v (loop) a0)) (v (loop) a1)) (a (v (fun (loop) Z0) fn0) (v (loop) a0))) (a (v (fun (loop) Z0) fn0) (v (loop) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a0) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a1) (a (a (c (fun Z1 (fun Z1 (bool))) =) (a (v (fun (finite_product) Z1) fn1) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) a0)) (v (loop) a1)))) (a (a (a (a (v (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z1)))) f9) (v (loop) a0)) (v (loop) a1)) (a (v (fun (loop) Z0) fn0) (v (loop) a0))) (a (v (fun (loop) Z0) fn0) (v (loop) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a0) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a1) (a (a (c (fun Z1 (fun Z1 (bool))) =) (a (v (fun (finite_product) Z1) fn1) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) a0)) (v (loop) a1)))) (a (a (a (a (v (fun (loop) (fun (loop) (fun Z0 (fun Z0 Z1)))) f10) (v (loop) a0)) (v (loop) a1)) (a (v (fun (loop) Z0) fn0) (v (loop) a0))) (a (v (fun (loop) Z0) fn0) (v (loop) a1))))))))) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a) (a (a (c (fun Z1 (fun Z1 (bool))) =) (a (v (fun (finite_product) Z1) fn1) (a (c (fun (loop) (finite_product)) halfatn) (v (loop) a)))) (a (a (v (fun (loop) (fun Z0 Z1)) f11) (v (loop) a)) (a (v (fun (loop) Z0) fn0) (v (loop) a)))))))))))))))))))))))))))))))))))))))))))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 2392044494106988321
  library_tag: "c-fDL.ml"
  pretty_printed: "|- !f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11.       ?fn0 fn1 fn2.           (!a. fn0 (pp a) = f0 a (fn2 a)) /\           (!a. fn0 (nn a) = f1 a (fn1 a)) /\           (!a. fn2 (pAtom a) = f2 a) /\           (!a0 a1. fn2 (a0 ** a1) = f3 a0 a1 (fn0 a0) (fn0 a1)) /\           (!a0 a1. fn2 (a0 /- a1) = f4 a0 a1 (fn0 a0) (fn0 a1)) /\           (!a0 a1. fn2 (a0 \- a1) = f5 a0 a1 (fn0 a0) (fn0 a1)) /\           (!a. fn2 (<>a) = f6 a (fn0 a)) /\           (!a. fn1 (nAtom a) = f7 a) /\           (!a0 a1. fn1 (a0 ## a1) = f8 a0 a1 (fn0 a0) (fn0 a1)) /\           (!a0 a1. fn1 (a0 \. a1) = f9 a0 a1 (fn0 a0) (fn0 a1)) /\           (!a0 a1. fn1 (a0 /. a1) = f10 a0 a1 (fn0 a0) (fn0 a1)) /\           (!a. fn1 (||a) = f11 a (fn0 a))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2392044494106988321
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (stable_sy) (bool)) (bool)) (bool)) !) (l (v (fun (stable_sy) (bool)) P0) (a (c (fun (fun (fun (tri_sy) (bool)) (bool)) (bool)) !) (l (v (fun (tri_sy) (bool)) P1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a) (a (v (fun (stable_sy) (bool)) P0) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (stable_sy) (bool)) P0) (v (stable_sy) a))) (a (v (fun (stable_sy) (bool)) P0) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) a))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a0) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (stable_sy) (bool)) P0) (v (stable_sy) a0))) (a (v (fun (stable_sy) (bool)) P0) (v (stable_sy) a1)))) (a (v (fun (stable_sy) (bool)) P0) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) a0)) (v (stable_sy) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a0) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (stable_sy) (bool)) P0) (v (stable_sy) a0))) (a (v (fun (tri_sy) (bool)) P1) (v (tri_sy) a1)))) (a (v (fun (stable_sy) (bool)) P0) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) a0)) (v (tri_sy) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a0) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (tri_sy) (bool)) P1) (v (tri_sy) a0))) (a (v (fun (stable_sy) (bool)) P0) (v (stable_sy) a1)))) (a (v (fun (stable_sy) (bool)) P0) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) a0)) (v (stable_sy) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a) (a (v (fun (stable_sy) (bool)) P0) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a) (a (v (fun (tri_sy) (bool)) P1) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (tri_sy) (bool)) P1) (v (tri_sy) a))) (a (v (fun (tri_sy) (bool)) P1) (a (c (fun (tri_sy) (tri_sy)) halfatn4) (v (tri_sy) a))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a0) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (tri_sy) (bool)) P1) (v (tri_sy) a0))) (a (v (fun (tri_sy) (bool)) P1) (v (tri_sy) a1)))) (a (v (fun (tri_sy) (bool)) P1) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) a0)) (v (tri_sy) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a0) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (tri_sy) (bool)) P1) (v (tri_sy) a0))) (a (v (fun (stable_sy) (bool)) P0) (v (stable_sy) a1)))) (a (v (fun (tri_sy) (bool)) P1) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) a0)) (v (stable_sy) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a0) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a1) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (stable_sy) (bool)) P0) (v (stable_sy) a0))) (a (v (fun (tri_sy) (bool)) P1) (v (tri_sy) a1)))) (a (v (fun (tri_sy) (bool)) P1) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) a0)) (v (tri_sy) a1))))))))) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a) (a (v (fun (tri_sy) (bool)) P1) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) a))))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) x0) (a (v (fun (stable_sy) (bool)) P0) (v (stable_sy) x0))))) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) x1) (a (v (fun (tri_sy) (bool)) P1) (v (tri_sy) x1))))))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 253880228179485777
  library_tag: "c-fDL.ml"
  pretty_printed: "|- !P0 P1.       (!a. P0 (ff a)) /\       (!a. P0 a ==> P0 (<>^a)) /\       (!a0 a1. P0 a0 /\ P0 a1 ==> P0 (a0 **^ a1)) /\       (!a0 a1. P0 a0 /\ P1 a1 ==> P0 (a0 /-^ a1)) /\       (!a0 a1. P1 a0 /\ P0 a1 ==> P0 (a0 \-^ a1)) /\       (!a. P0 (focf a)) /\       (!a. P1 (gg a)) /\       (!a. P1 a ==> P1 (||^a)) /\       (!a0 a1. P1 a0 /\ P1 a1 ==> P1 (a0 ##^ a1)) /\       (!a0 a1. P1 a0 /\ P0 a1 ==> P1 (a0 /.^ a1)) /\       (!a0 a1. P0 a0 /\ P1 a1 ==> P1 (a0 \.^ a1)) /\       (!a. P1 (focg a))       ==> (!x0. P0 x0) /\ (!x1. P1 x1)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 253880228179485777
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (loop) Z0) (bool)) (bool)) !) (l (v (fun (loop) Z0) f0) (a (c (fun (fun (fun (stable_sy) (fun Z0 Z0)) (bool)) (bool)) !) (l (v (fun (stable_sy) (fun Z0 Z0)) f1) (a (c (fun (fun (fun (stable_sy) (fun (stable_sy) (fun Z0 (fun Z0 Z0)))) (bool)) (bool)) !) (l (v (fun (stable_sy) (fun (stable_sy) (fun Z0 (fun Z0 Z0)))) f2) (a (c (fun (fun (fun (stable_sy) (fun (tri_sy) (fun Z0 (fun Z1 Z0)))) (bool)) (bool)) !) (l (v (fun (stable_sy) (fun (tri_sy) (fun Z0 (fun Z1 Z0)))) f3) (a (c (fun (fun (fun (tri_sy) (fun (stable_sy) (fun Z1 (fun Z0 Z0)))) (bool)) (bool)) !) (l (v (fun (tri_sy) (fun (stable_sy) (fun Z1 (fun Z0 Z0)))) f4) (a (c (fun (fun (fun (loop) Z0) (bool)) (bool)) !) (l (v (fun (loop) Z0) f5) (a (c (fun (fun (fun (loop) Z1) (bool)) (bool)) !) (l (v (fun (loop) Z1) f6) (a (c (fun (fun (fun (tri_sy) (fun Z1 Z1)) (bool)) (bool)) !) (l (v (fun (tri_sy) (fun Z1 Z1)) f7) (a (c (fun (fun (fun (tri_sy) (fun (tri_sy) (fun Z1 (fun Z1 Z1)))) (bool)) (bool)) !) (l (v (fun (tri_sy) (fun (tri_sy) (fun Z1 (fun Z1 Z1)))) f8) (a (c (fun (fun (fun (tri_sy) (fun (stable_sy) (fun Z1 (fun Z0 Z1)))) (bool)) (bool)) !) (l (v (fun (tri_sy) (fun (stable_sy) (fun Z1 (fun Z0 Z1)))) f9) (a (c (fun (fun (fun (stable_sy) (fun (tri_sy) (fun Z0 (fun Z1 Z1)))) (bool)) (bool)) !) (l (v (fun (stable_sy) (fun (tri_sy) (fun Z0 (fun Z1 Z1)))) f10) (a (c (fun (fun (fun (loop) Z1) (bool)) (bool)) !) (l (v (fun (loop) Z1) f11) (a (c (fun (fun (fun (stable_sy) Z0) (bool)) (bool)) ?) (l (v (fun (stable_sy) Z0) fn0) (a (c (fun (fun (fun (tri_sy) Z1) (bool)) (bool)) ?) (l (v (fun (tri_sy) Z1) fn1) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a) (a (a (c (fun Z0 (fun Z0 (bool))) =) (a (v (fun (stable_sy) Z0) fn0) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) a)))) (a (v (fun (loop) Z0) f0) (v (loop) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a) (a (a (c (fun Z0 (fun Z0 (bool))) =) (a (v (fun (stable_sy) Z0) fn0) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) a)))) (a (a (v (fun (stable_sy) (fun Z0 Z0)) f1) (v (stable_sy) a)) (a (v (fun (stable_sy) Z0) fn0) (v (stable_sy) a))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a0) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a1) (a (a (c (fun Z0 (fun Z0 (bool))) =) (a (v (fun (stable_sy) Z0) fn0) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) a0)) (v (stable_sy) a1)))) (a (a (a (a (v (fun (stable_sy) (fun (stable_sy) (fun Z0 (fun Z0 Z0)))) f2) (v (stable_sy) a0)) (v (stable_sy) a1)) (a (v (fun (stable_sy) Z0) fn0) (v (stable_sy) a0))) (a (v (fun (stable_sy) Z0) fn0) (v (stable_sy) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a0) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a1) (a (a (c (fun Z0 (fun Z0 (bool))) =) (a (v (fun (stable_sy) Z0) fn0) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) a0)) (v (tri_sy) a1)))) (a (a (a (a (v (fun (stable_sy) (fun (tri_sy) (fun Z0 (fun Z1 Z0)))) f3) (v (stable_sy) a0)) (v (tri_sy) a1)) (a (v (fun (stable_sy) Z0) fn0) (v (stable_sy) a0))) (a (v (fun (tri_sy) Z1) fn1) (v (tri_sy) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a0) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a1) (a (a (c (fun Z0 (fun Z0 (bool))) =) (a (v (fun (stable_sy) Z0) fn0) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) a0)) (v (stable_sy) a1)))) (a (a (a (a (v (fun (tri_sy) (fun (stable_sy) (fun Z1 (fun Z0 Z0)))) f4) (v (tri_sy) a0)) (v (stable_sy) a1)) (a (v (fun (tri_sy) Z1) fn1) (v (tri_sy) a0))) (a (v (fun (stable_sy) Z0) fn0) (v (stable_sy) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a) (a (a (c (fun Z0 (fun Z0 (bool))) =) (a (v (fun (stable_sy) Z0) fn0) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) a)))) (a (v (fun (loop) Z0) f5) (v (loop) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a) (a (a (c (fun Z1 (fun Z1 (bool))) =) (a (v (fun (tri_sy) Z1) fn1) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) a)))) (a (v (fun (loop) Z1) f6) (v (loop) a)))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a) (a (a (c (fun Z1 (fun Z1 (bool))) =) (a (v (fun (tri_sy) Z1) fn1) (a (c (fun (tri_sy) (tri_sy)) halfatn4) (v (tri_sy) a)))) (a (a (v (fun (tri_sy) (fun Z1 Z1)) f7) (v (tri_sy) a)) (a (v (fun (tri_sy) Z1) fn1) (v (tri_sy) a))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a0) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a1) (a (a (c (fun Z1 (fun Z1 (bool))) =) (a (v (fun (tri_sy) Z1) fn1) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) a0)) (v (tri_sy) a1)))) (a (a (a (a (v (fun (tri_sy) (fun (tri_sy) (fun Z1 (fun Z1 Z1)))) f8) (v (tri_sy) a0)) (v (tri_sy) a1)) (a (v (fun (tri_sy) Z1) fn1) (v (tri_sy) a0))) (a (v (fun (tri_sy) Z1) fn1) (v (tri_sy) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a0) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a1) (a (a (c (fun Z1 (fun Z1 (bool))) =) (a (v (fun (tri_sy) Z1) fn1) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) a0)) (v (stable_sy) a1)))) (a (a (a (a (v (fun (tri_sy) (fun (stable_sy) (fun Z1 (fun Z0 Z1)))) f9) (v (tri_sy) a0)) (v (stable_sy) a1)) (a (v (fun (tri_sy) Z1) fn1) (v (tri_sy) a0))) (a (v (fun (stable_sy) Z0) fn0) (v (stable_sy) a1))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a0) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a1) (a (a (c (fun Z1 (fun Z1 (bool))) =) (a (v (fun (tri_sy) Z1) fn1) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) a0)) (v (tri_sy) a1)))) (a (a (a (a (v (fun (stable_sy) (fun (tri_sy) (fun Z0 (fun Z1 Z1)))) f10) (v (stable_sy) a0)) (v (tri_sy) a1)) (a (v (fun (stable_sy) Z0) fn0) (v (stable_sy) a0))) (a (v (fun (tri_sy) Z1) fn1) (v (tri_sy) a1))))))))) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) a) (a (a (c (fun Z1 (fun Z1 (bool))) =) (a (v (fun (tri_sy) Z1) fn1) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) a)))) (a (v (fun (loop) Z1) f11) (v (loop) a))))))))))))))))))))))))))))))))))))))))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 2227295885020500597
  library_tag: "c-fDL.ml"
  pretty_printed: "|- !f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11.       ?fn0 fn1.           (!a. fn0 (ff a) = f0 a) /\           (!a. fn0 (<>^a) = f1 a (fn0 a)) /\           (!a0 a1. fn0 (a0 **^ a1) = f2 a0 a1 (fn0 a0) (fn0 a1)) /\           (!a0 a1. fn0 (a0 /-^ a1) = f3 a0 a1 (fn0 a0) (fn1 a1)) /\           (!a0 a1. fn0 (a0 \-^ a1) = f4 a0 a1 (fn1 a0) (fn0 a1)) /\           (!a. fn0 (focf a) = f5 a) /\           (!a. fn1 (gg a) = f6 a) /\           (!a. fn1 (||^a) = f7 a (fn1 a)) /\           (!a0 a1. fn1 (a0 ##^ a1) = f8 a0 a1 (fn1 a0) (fn1 a1)) /\           (!a0 a1. fn1 (a0 /.^ a1) = f9 a0 a1 (fn1 a0) (fn0 a1)) /\           (!a0 a1. fn1 (a0 \.^ a1) = f10 a0 a1 (fn0 a0) (fn1 a1)) /\           (!a. fn1 (focg a) = f11 a)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2227295885020500597
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (scs_v39) (bool)) (bool)) (bool)) !) (l (v (fun (scs_v39) (bool)) P) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a0) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a1) (a (v (fun (scs_v39) (bool)) P) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) a0)) (v (tri_sy) a1)))))))) (a (c (fun (fun (scs_v39) (bool)) (bool)) !) (l (v (scs_v39) x) (a (v (fun (scs_v39) (bool)) P) (v (scs_v39) x)))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 810571157016681631 
  library_tag: "c-fDL.ml"
  pretty_printed: "|- !P. (!a0 a1. P (a0 --> a1)) ==> (!x. P x)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 810571157016681631
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (stable_sy) (fun (tri_sy) Z)) (bool)) (bool)) !) (l (v (fun (stable_sy) (fun (tri_sy) Z)) f) (a (c (fun (fun (fun (scs_v39) Z) (bool)) (bool)) ?) (l (v (fun (scs_v39) Z) fn) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) a0) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) a1) (a (a (c (fun Z (fun Z (bool))) =) (a (v (fun (scs_v39) Z) fn) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) a0)) (v (tri_sy) a1)))) (a (a (v (fun (stable_sy) (fun (tri_sy) Z)) f) (v (stable_sy) a0)) (v (tri_sy) a1)))))))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 1219956137042814639 
  library_tag: "c-fDL.ml"
  pretty_printed: "|- !f. ?fn. !a0 a1. fn (a0 --> a1) = f a0 a1"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 1219956137042814639
}





theorems {
  conclusion:  "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) p) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) n) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) n))))) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) n))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (cc_v11) (bool)) (bool)) !) (l (v (cc_v11) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (finite_product) (bool)) (bool)) !) (l (v (finite_product) B) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))) (v (tri_sy) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (cc_v11) (bool)) (bool)) !) (l (v (cc_v11) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))) (v (tri_sy) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (finite_product) (bool)) (bool)) !) (l (v (finite_product) B) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Z))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Z)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Z)) (v (stable_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Z)) (v (stable_sy) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) Z))) (v (tri_sy) X)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) Z))) (v (tri_sy) X))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) Z)) (v (tri_sy) X))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) Z)) (v (tri_sy) X))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) Y)) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Z))))) (v (tri_sy) W)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Z)))) (v (tri_sy) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Y)))) (v (stable_sy) Z))) (v (tri_sy) W)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Z))) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Y)))) (v (tri_sy) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) A)) (v (loop) B)))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) X)) (v (tri_sy) Y))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) A)) (v (loop) B)))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) X))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) B)) (v (loop) A)))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) A))) (v (tri_sy) X)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) A)) (v (loop) B))))) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) X)) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) A)) (v (loop) B)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) A)) (v (loop) B))))) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) A)) (v (loop) B)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) B)) (v (loop) A))))) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Y)) (v (stable_sy) X)))))))))))))) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) A)) (v (loop) B)))))))))))))))))))))))))))))))))))))))))"
  tag: DEFINITION
  fingerprint: 2433081123839384746
 definition {
    definition_type: "INDUCTIVE"
    definition_term: "(a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) p) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) n) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) n))))) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) n))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (cc_v11) (bool)) (bool)) !) (l (v (cc_v11) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (finite_product) (bool)) (bool)) !) (l (v (finite_product) B) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))) (v (tri_sy) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (cc_v11) (bool)) (bool)) !) (l (v (cc_v11) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))) (v (tri_sy) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (finite_product) (bool)) (bool)) !) (l (v (finite_product) B) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Z))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Z)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Z)) (v (stable_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Z)) (v (stable_sy) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) Z))) (v (tri_sy) X)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) Z))) (v (tri_sy) X))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) Z)) (v (tri_sy) X))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) Z)) (v (tri_sy) X))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) Y)) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Z))))) (v (tri_sy) W)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Z)))) (v (tri_sy) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Y)))) (v (stable_sy) Z))) (v (tri_sy) W)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Z))) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Y)))) (v (tri_sy) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) A)) (v (loop) B)))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) X)) (v (tri_sy) Y))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) A)) (v (loop) B)))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) X))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) B)) (v (loop) A)))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) A))) (v (tri_sy) X)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) A)) (v (loop) B))))) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) X)) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) A)) (v (loop) B)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) A)) (v (loop) B))))) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) A)) (v (loop) B)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) B)) (v (loop) A))))) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Y)) (v (stable_sy) X)))))))))))))) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) A)) (v (loop) B)))))))))))))))))))))))))))))))))))))))))"
    constants: "RC"
  }    
  library_tag: "c-fDL.ml"
  pretty_printed: "|- (!p. |--(ff (pp (pAtom p)) --> focg (pp (pAtom p)))) /\   (!n. |--(focf (nn (nAtom n)) --> gg (nn (nAtom n)))) /\   (!X A. |--(X --> focg (pp A)) ==> |--(X --> gg (pp A))) /\   (!Y B. |--(focf (nn B) --> Y) ==> |--(ff (nn B) --> Y)) /\   (!Y A. |--(ff (pp A) --> Y) ==> |--(focf (pp A) --> Y)) /\   (!X B. |--(X --> gg (nn B)) ==> |--(X --> focg (nn B))) /\   (!X Y A. |--(X --> gg A) /\ |--(ff A --> Y) ==> |--(X --> Y)) /\   (!X Y Z. |--(Y --> X \.^ Z) ==> |--(X **^ Y --> Z)) /\   (!X Y Z. |--(X **^ Y --> Z) ==> |--(Y --> X \.^ Z)) /\   (!X Y Z. |--(X --> Z /.^ Y) ==> |--(X **^ Y --> Z)) /\   (!X Y Z. |--(X **^ Y --> Z) ==> |--(X --> Z /.^ Y)) /\   (!X Y Z. |--(Y \-^ Z --> X) ==> |--(Z --> Y ##^ X)) /\   (!X Y Z. |--(Z --> Y ##^ X) ==> |--(Y \-^ Z --> X)) /\   (!X Y Z. |--(Z /-^ X --> Y) ==> |--(Z --> Y ##^ X)) /\   (!X Y Z. |--(Z --> Y ##^ X) ==> |--(Z /-^ X --> Y)) /\   (!X Y Z W. |--(X **^ Y **^ <>^Z --> W) ==> |--((X **^ Y) **^ <>^Z --> W)) /\   (!X Y Z W.        |--((X **^ <>^Y) **^ Z --> W) ==> |--((X **^ Z) **^ <>^Y --> W)) /\   (!A B Y. |--(ff A **^ ff B --> Y) ==> |--(ff (pp (A ** B)) --> Y)) /\   (!A B X Y.        |--(X --> focg A) /\ |--(Y --> focg B)        ==> |--(X **^ Y --> focg (pp (A ** B)))) /\   (!A B Y. |--(ff A /-^ gg B --> Y) ==> |--(ff (pp (A /- B)) --> Y)) /\   (!A B X Y.        |--(X --> focg A) /\ |--(focf B --> Y)        ==> |--(X /-^ Y --> focg (pp (A /- B)))) /\   (!A B Y. |--(gg A \-^ ff B --> Y) ==> |--(ff (pp (A \- B)) --> Y)) /\   (!A B X Y.        |--(X --> focg A) /\ |--(focf B --> Y)        ==> |--(Y \-^ X --> focg (pp (B \- A)))) /\   (!A B X Y.        |--(focf A --> X) /\ |--(focf B --> Y)        ==> |--(focf (nn (A ## B)) --> X ##^ Y)) /\   (!A B X. |--(X --> gg A ##^ gg B) ==> |--(X --> gg (nn (A ## B)))) /\   (!A B X Y.        |--(X --> focg A) /\ |--(focf B --> Y)        ==> |--(focf (nn (A \. B)) --> X \.^ Y)) /\   (!A B X. |--(X --> ff A \.^ gg B) ==> |--(X --> gg (nn (A \. B)))) /\   (!A B X Y.        |--(X --> focg A) /\ |--(focf B --> Y)        ==> |--(focf (nn (B /. A)) --> Y /.^ X)) /\   (!A B X. |--(X --> gg A /.^ ff B) ==> |--(X --> gg (nn (A /. B))))"
}

theorems {
  conclusion:  "(a (c (fun (fun (fun (scs_v39) (bool)) (bool)) (bool)) !) (l (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) p) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) n) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) n))))) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) n))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (cc_v11) (bool)) (bool)) !) (l (v (cc_v11) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (finite_product) (bool)) (bool)) !) (l (v (finite_product) B) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))) (v (tri_sy) Y)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))) (v (tri_sy) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (cc_v11) (bool)) (bool)) !) (l (v (cc_v11) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))) (v (tri_sy) Y)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))) (v (tri_sy) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (finite_product) (bool)) (bool)) !) (l (v (finite_product) B) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (v (tri_sy) Y))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Z))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Z)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Z)) (v (stable_sy) Y))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Z)) (v (stable_sy) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) Z))) (v (tri_sy) X)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) Z))) (v (tri_sy) X))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) Z)) (v (tri_sy) X))) (v (tri_sy) Y)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) Z)) (v (tri_sy) X))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) Y)) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Z))))) (v (tri_sy) W)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Z)))) (v (tri_sy) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Y)))) (v (stable_sy) Z))) (v (tri_sy) W)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Z))) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Y)))) (v (tri_sy) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))) (v (tri_sy) Y)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) B)))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) A)) (v (loop) B)))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))) (v (tri_sy) Y)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) X)) (v (tri_sy) Y))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) A)) (v (loop) B)))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))) (v (tri_sy) Y)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) X))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) B)) (v (loop) A)))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) A))) (v (tri_sy) X)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) A)) (v (loop) B))))) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) X)) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) A)) (v (loop) B)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) A)) (v (loop) B))))) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) A)) (v (loop) B)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) B)) (v (loop) A))))) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Y)) (v (stable_sy) X)))))))))))))) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) A)) (v (loop) B)))))))))))))))))))))))))))))))))))))))))) (a (c (fun (fun (scs_v39) (bool)) (bool)) !) (l (v (scs_v39) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (v (scs_v39) a))) (a (v (fun (scs_v39) (bool)) RC') (v (scs_v39) a))))))))"
  tag: DEFINITION
  fingerprint: 4242258070559897809
  library_tag: "c-fDL.ml"
  definition {
    definition_type: "INDUCTIVE"
    definition_term: "(a (c (fun (fun (fun (scs_v39) (bool)) (bool)) (bool)) !) (l (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) p) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (list (char)) (bool)) (bool)) !) (l (v (list (char)) n) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) n))))) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) n))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (cc_v11) (bool)) (bool)) !) (l (v (cc_v11) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (finite_product) (bool)) (bool)) !) (l (v (finite_product) B) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))) (v (tri_sy) Y)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))) (v (tri_sy) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (cc_v11) (bool)) (bool)) !) (l (v (cc_v11) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))) (v (tri_sy) Y)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))) (v (tri_sy) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (finite_product) (bool)) (bool)) !) (l (v (finite_product) B) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (v (tri_sy) Y))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Z))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Z)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Z)) (v (stable_sy) Y))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Z)) (v (stable_sy) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) Z))) (v (tri_sy) X)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) Z))) (v (tri_sy) X))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) Z)) (v (tri_sy) X))) (v (tri_sy) Y)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) Z)) (v (tri_sy) X))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) Y)) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Z))))) (v (tri_sy) W)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Z)))) (v (tri_sy) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Z) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) W) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Y)))) (v (stable_sy) Z))) (v (tri_sy) W)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Z))) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Y)))) (v (tri_sy) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))) (v (tri_sy) Y)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) B)))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) A)) (v (loop) B)))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))) (v (tri_sy) Y)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) X)) (v (tri_sy) Y))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) A)) (v (loop) B)))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))) (v (tri_sy) Y)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) X))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) B)) (v (loop) A)))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) A))) (v (tri_sy) X)))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) A)) (v (loop) B))))) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) X)) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) A)) (v (loop) B)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) A)) (v (loop) B))))) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) A)) (v (loop) B)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) !) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) B)) (v (loop) A))))) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Y)) (v (stable_sy) X)))))))))))))) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) !) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) !) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))))) (a (v (fun (scs_v39) (bool)) RC') (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) A)) (v (loop) B)))))))))))))))))))))))))))))))))))))))))) (a (c (fun (fun (scs_v39) (bool)) (bool)) !) (l (v (scs_v39) a) (a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (v (scs_v39) a))) (a (v (fun (scs_v39) (bool)) RC') (v (scs_v39) a))))))))"
    constants: "RC"
  }   
  pretty_printed: "|- !|--'. (!p. |--' (ff (pp (pAtom p)) --> focg (pp (pAtom p)))) /\           (!n. |--' (focf (nn (nAtom n)) --> gg (nn (nAtom n)))) /\           (!X A. |--' (X --> focg (pp A)) ==> |--' (X --> gg (pp A))) /\           (!Y B. |--' (focf (nn B) --> Y) ==> |--' (ff (nn B) --> Y)) /\           (!Y A. |--' (ff (pp A) --> Y) ==> |--' (focf (pp A) --> Y)) /\           (!X B. |--' (X --> gg (nn B)) ==> |--' (X --> focg (nn B))) /\           (!X Y A. |--' (X --> gg A) /\ |--' (ff A --> Y) ==> |--' (X --> Y)) /\           (!X Y Z. |--' (Y --> X \.^ Z) ==> |--' (X **^ Y --> Z)) /\           (!X Y Z. |--' (X **^ Y --> Z) ==> |--' (Y --> X \.^ Z)) /\           (!X Y Z. |--' (X --> Z /.^ Y) ==> |--' (X **^ Y --> Z)) /\           (!X Y Z. |--' (X **^ Y --> Z) ==> |--' (X --> Z /.^ Y)) /\           (!X Y Z. |--' (Y \-^ Z --> X) ==> |--' (Z --> Y ##^ X)) /\           (!X Y Z. |--' (Z --> Y ##^ X) ==> |--' (Y \-^ Z --> X)) /\           (!X Y Z. |--' (Z /-^ X --> Y) ==> |--' (Z --> Y ##^ X)) /\           (!X Y Z. |--' (Z --> Y ##^ X) ==> |--' (Z /-^ X --> Y)) /\           (!X Y Z W.                |--' (X **^ Y **^ <>^Z --> W)                ==> |--' ((X **^ Y) **^ <>^Z --> W)) /\           (!X Y Z W.                |--' ((X **^ <>^Y) **^ Z --> W)                ==> |--' ((X **^ Z) **^ <>^Y --> W)) /\           (!A B Y.                |--' (ff A **^ ff B --> Y) ==> |--' (ff (pp (A ** B)) --> Y)) /\           (!A B X Y.                |--' (X --> focg A) /\ |--' (Y --> focg B)                ==> |--' (X **^ Y --> focg (pp (A ** B)))) /\           (!A B Y.                |--' (ff A /-^ gg B --> Y) ==> |--' (ff (pp (A /- B)) --> Y)) /\           (!A B X Y.                |--' (X --> focg A) /\ |--' (focf B --> Y)                ==> |--' (X /-^ Y --> focg (pp (A /- B)))) /\           (!A B Y.                |--' (gg A \-^ ff B --> Y) ==> |--' (ff (pp (A \- B)) --> Y)) /\           (!A B X Y.                |--' (X --> focg A) /\ |--' (focf B --> Y)                ==> |--' (Y \-^ X --> focg (pp (B \- A)))) /\           (!A B X Y.                |--' (focf A --> X) /\ |--' (focf B --> Y)                ==> |--' (focf (nn (A ## B)) --> X ##^ Y)) /\           (!A B X.                |--' (X --> gg A ##^ gg B) ==> |--' (X --> gg (nn (A ## B)))) /\           (!A B X Y.                |--' (X --> focg A) /\ |--' (focf B --> Y)                ==> |--' (focf (nn (A \. B)) --> X \.^ Y)) /\           (!A B X.                |--' (X --> ff A \.^ gg B) ==> |--' (X --> gg (nn (A \. B)))) /\           (!A B X Y.                |--' (X --> focg A) /\ |--' (focf B --> Y)                ==> |--' (focf (nn (B /. A)) --> Y /.^ X)) /\           (!A B X.                |--' (X --> gg A /.^ ff B) ==> |--' (X --> gg (nn (A /. B))))           ==> (!a. |--a ==> |--' a)"
}

theorems {
  conclusion:  "(a (c (fun (fun (scs_v39) (bool)) (bool)) !) (l (v (scs_v39) a) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (scs_v39) (bool)) RC) (v (scs_v39) a))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) p) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) n) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) n))))) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) n))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (cc_v11) (bool)) (bool)) ?) (l (v (cc_v11) A) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (c (fun (fun (finite_product) (bool)) (bool)) ?) (l (v (finite_product) B) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))) (v (tri_sy) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (c (fun (fun (cc_v11) (bool)) (bool)) ?) (l (v (cc_v11) A) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))) (v (tri_sy) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (finite_product) (bool)) (bool)) ?) (l (v (finite_product) B) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (v (tri_sy) Y)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (v (tri_sy) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Z)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Z))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Z)) (v (stable_sy) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Z)) (v (stable_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) Z))) (v (tri_sy) X))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) Z))) (v (tri_sy) X)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) Z)) (v (tri_sy) X))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) Z)) (v (tri_sy) X))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Z) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) W) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Z)))) (v (tri_sy) W)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) Y)) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Z))))) (v (tri_sy) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Z) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) W) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Z))) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Y)))) (v (tri_sy) W)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Y)))) (v (stable_sy) Z))) (v (tri_sy) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) A)) (v (loop) B))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) B))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) X)) (v (tri_sy) Y))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) A)) (v (loop) B))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) X))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) B)) (v (loop) A))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) A)) (v (loop) B))))) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) X)) (v (tri_sy) Y))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) A))) (v (tri_sy) X)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) A)) (v (loop) B))))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) A)) (v (loop) B))))) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Y))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) A)) (v (loop) B))))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) B)) (v (loop) A))))) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Y)) (v (stable_sy) X))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y)))))))))))))) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) A)) (v (loop) B))))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))))))))))))))))))))))))))))))))))))))))))"
  tag: DEFINITION
  fingerprint: 1499146169040961258
  definition {
    definition_type: "INDUCTIVE"
    definition_term: "(a (c (fun (fun (scs_v39) (bool)) (bool)) !) (l (v (scs_v39) a) (a (a (c (fun (bool) (fun (bool) (bool))) =) (a (c (fun (scs_v39) (bool)) RC) (v (scs_v39) a))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) p) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (list (char)) (bool)) (bool)) ?) (l (v (list (char)) n) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) n))))) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) n))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (cc_v11) (bool)) (bool)) ?) (l (v (cc_v11) A) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (c (fun (fun (finite_product) (bool)) (bool)) ?) (l (v (finite_product) B) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))) (v (tri_sy) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (c (fun (fun (cc_v11) (bool)) (bool)) ?) (l (v (cc_v11) A) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))) (v (tri_sy) Y))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (finite_product) (bool)) (bool)) ?) (l (v (finite_product) B) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (v (tri_sy) Y)))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (v (tri_sy) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Z)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Z))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Z)) (v (stable_sy) Y)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Y) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Z)) (v (stable_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) Z))) (v (tri_sy) X))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) Z))) (v (tri_sy) X)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) Z)) (v (tri_sy) X))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Z) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) Z)) (v (tri_sy) X))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X)))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Z) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) W) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Z)))) (v (tri_sy) W)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) Y)) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Z))))) (v (tri_sy) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Y) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Z) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) W) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Z))) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Y)))) (v (tri_sy) W)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Y)))) (v (stable_sy) Z))) (v (tri_sy) W))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) A)) (v (loop) B))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) B))))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) X)) (v (tri_sy) Y))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) A)) (v (loop) B))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))) (v (tri_sy) Y))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) X))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) B)) (v (loop) A))))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) A)) (v (loop) B))))) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) X)) (v (tri_sy) Y))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) A))) (v (tri_sy) X)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) A)) (v (loop) B))))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) A)) (v (loop) B))))) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Y))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y)))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) A)) (v (loop) B))))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B))))))))))))) (a (a (c (fun (bool) (fun (bool) (bool))) \\/) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (c (fun (fun (tri_sy) (bool)) (bool)) ?) (l (v (tri_sy) Y) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) B)) (v (loop) A))))) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Y)) (v (stable_sy) X))))) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y)))))))))))))) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) A) (a (c (fun (fun (loop) (bool)) (bool)) ?) (l (v (loop) B) (a (c (fun (fun (stable_sy) (bool)) (bool)) ?) (l (v (stable_sy) X) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (a (c (fun (scs_v39) (fun (scs_v39) (bool))) =) (v (scs_v39) a)) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) A)) (v (loop) B))))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))))))))))))))))))))))))))))))))))))))))))"
    constants: "RC"
  }  
  library_tag: "c-fDL.ml"
  pretty_printed: "|- !a. |--a <=>        (?p. a = (ff (pp (pAtom p)) --> focg (pp (pAtom p)))) \/        (?n. a = (focf (nn (nAtom n)) --> gg (nn (nAtom n)))) \/        (?X A. a = (X --> gg (pp A)) /\ |--(X --> focg (pp A))) \/        (?Y B. a = (ff (nn B) --> Y) /\ |--(focf (nn B) --> Y)) \/        (?Y A. a = (focf (pp A) --> Y) /\ |--(ff (pp A) --> Y)) \/        (?X B. a = (X --> focg (nn B)) /\ |--(X --> gg (nn B))) \/        (?X Y A. a = (X --> Y) /\ |--(X --> gg A) /\ |--(ff A --> Y)) \/        (?X Y Z. a = (X **^ Y --> Z) /\ |--(Y --> X \.^ Z)) \/        (?X Y Z. a = (Y --> X \.^ Z) /\ |--(X **^ Y --> Z)) \/        (?X Y Z. a = (X **^ Y --> Z) /\ |--(X --> Z /.^ Y)) \/        (?X Y Z. a = (X --> Z /.^ Y) /\ |--(X **^ Y --> Z)) \/        (?X Y Z. a = (Z --> Y ##^ X) /\ |--(Y \-^ Z --> X)) \/        (?X Y Z. a = (Y \-^ Z --> X) /\ |--(Z --> Y ##^ X)) \/        (?X Y Z. a = (Z --> Y ##^ X) /\ |--(Z /-^ X --> Y)) \/        (?X Y Z. a = (Z /-^ X --> Y) /\ |--(Z --> Y ##^ X)) \/        (?X Y Z W.             a = ((X **^ Y) **^ <>^Z --> W) /\ |--(X **^ Y **^ <>^Z --> W)) \/        (?X Y Z W.             a = ((X **^ Z) **^ <>^Y --> W) /\ |--((X **^ <>^Y) **^ Z --> W)) \/        (?A B Y. a = (ff (pp (A ** B)) --> Y) /\ |--(ff A **^ ff B --> Y)) \/        (?A B X Y.             a = (X **^ Y --> focg (pp (A ** B))) /\             |--(X --> focg A) /\             |--(Y --> focg B)) \/        (?A B Y. a = (ff (pp (A /- B)) --> Y) /\ |--(ff A /-^ gg B --> Y)) \/        (?A B X Y.             a = (X /-^ Y --> focg (pp (A /- B))) /\             |--(X --> focg A) /\             |--(focf B --> Y)) \/        (?A B Y. a = (ff (pp (A \- B)) --> Y) /\ |--(gg A \-^ ff B --> Y)) \/        (?A B X Y.             a = (Y \-^ X --> focg (pp (B \- A))) /\             |--(X --> focg A) /\             |--(focf B --> Y)) \/        (?A B X Y.             a = (focf (nn (A ## B)) --> X ##^ Y) /\             |--(focf A --> X) /\             |--(focf B --> Y)) \/        (?A B X. a = (X --> gg (nn (A ## B))) /\ |--(X --> gg A ##^ gg B)) \/        (?A B X Y.             a = (focf (nn (A \. B)) --> X \.^ Y) /\             |--(X --> focg A) /\             |--(focf B --> Y)) \/        (?A B X. a = (X --> gg (nn (A \. B))) /\ |--(X --> ff A \.^ gg B)) \/        (?A B X Y.             a = (focf (nn (B /. A)) --> Y /.^ X) /\             |--(X --> focg A) /\             |--(focf B --> Y)) \/        (?A B X. a = (X --> gg (nn (A /. B))) /\ |--(X --> gg A /.^ ff B))"
}



















theorems {
  conclusion: "(a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 4282232036110011538 
  library_tag: "c-fDL.ml"
  pretty_printed: "|-- (ff (pp(pAtom p)) --> focg (pp(pAtom p)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 4282232036110011538
}

theorems {
  conclusion: "(a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) n))))) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) n))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 1890961052333620652 
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(focf (nn(nAtom n)) --> gg (nn(nAtom n)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 1890961052333620652
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 2808810690357765153 
  library_tag: "c-fDL.ml"
  pretty_printed: "|-- (X --> focg (pp A)) ==> |-- (X --> gg (pp A))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2808810690357765153
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))) (v (tri_sy) Y))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 1293350574629016751
  library_tag: "c-fDL.ml"
  pretty_printed: "|-- (focf (nn B) --> Y) ==> |-- ((ff (nn B)) --> Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 1293350574629016751
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (cc_v11) (loop)) plane) (v (cc_v11) A)))) (v (tri_sy) Y))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 256895741158231690
  library_tag: "c-fDL.ml"
  pretty_printed: "|-- ((ff (pp A)) --> Y) ==> |-- (focf (pp A) --> Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 256895741158231690
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (finite_product) (loop)) plane_norm) (v (finite_product) B))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 776707393854637411
  library_tag: "c-fDL.ml"
  pretty_printed: "|-- ((ff (pp A)) --> Y) ==> |-- (focf (pp A) --> Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 776707393854637411
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (v (tri_sy) Y))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 648188192380520622
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(X --> gg A) /\ |--(ff A --> Y) ==> |--(X --> Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 648188192380520622
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Z))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 2331699710152630998
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(Y --> X \.^ Z) ==> |--(X **^ Y --> Z)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2331699710152630998
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Z)))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 2313659865416298332
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(X **^ Y --> Z) ==> |--(Y --> X \.^ Z)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2313659865416298332
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Z)) (v (stable_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 324105359611762671
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(X --> Z /.^ Y) ==> |--(X **^ Y --> Z)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 324105359611762671
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (v (tri_sy) Z)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Z)) (v (stable_sy) Y)))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 2346343096004033294
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(X **^ Y --> Z) ==> |--(X --> Z /.^ Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2346343096004033294
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) Z))) (v (tri_sy) X)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X)))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 4129285656825605475
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(Y \-^ Z --> X) ==> |--(Z --> Y ##^ X)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 4129285656825605475
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) Z))) (v (tri_sy) X))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 2774669844410075802
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(Z --> Y ##^ X) ==> |--(Y \-^ Z --> X)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2774669844410075802
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) Z)) (v (tri_sy) X))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X)))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 3758986972369540824
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(Z /-^ X --> Y) ==> |--(Z --> Y ##^ X)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 3758986972369540824
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Z)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) Y)) (v (tri_sy) X))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) Z)) (v (tri_sy) X))) (v (tri_sy) Y))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 2007519679165021834
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(Z --> Y ##^ X) ==> |--(Z /-^ X --> Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2007519679165021834
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) Y)) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Z))))) (v (tri_sy) W)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Z)))) (v (tri_sy) W))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 2435389848046465754
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(X **^ (Y **^ <>^Z) --> W) ==> |--((X **^ Y) **^ <>^Z --> W)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2435389848046465754
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Y)))) (v (stable_sy) Z))) (v (tri_sy) W)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Z))) (a (c (fun (stable_sy) (stable_sy)) twopow) (v (stable_sy) Y)))) (v (tri_sy) W))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 603487514377218900
  library_tag: "c-fDL.ml"
  pretty_printed: "|--((X **^ <>^Y) **^ Z --> W) ==> |--((X **^ Z) **^ <>^Y --> W)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 603487514377218900
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 2751491796312766639
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(ff A **^ ff B --> Y) ==> |--(ff (pp(A ** B)) --> Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2751491796312766639
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) Y)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (v (stable_sy) X)) (v (stable_sy) Y))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (v (loop) A)) (v (loop) B)))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 2175332160120085970
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(X --> focg A) /\ |--(Y --> focg B) ==> |--(X **^ Y --> focg(pp(A ** B)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2175332160120085970
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 1034562622051149436
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(ff A /-^ gg B --> Y) ==> |--(ff (pp(A /- B)) --> Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 1034562622051149436
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (tri_sy) (stable_sy))) -:) (v (stable_sy) X)) (v (tri_sy) Y))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -.) (v (loop) A)) (v (loop) B)))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 1921084384677096704
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(X --> focg A) /\ |--(focf B --> Y) ==> |--(X /-^ Y --> focg(pp(A /- B)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 1921084384677096704
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))) (v (tri_sy) Y)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) A)) (v (loop) B))))) (v (tri_sy) Y))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 1250246486460176351
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(gg A \-^ ff B --> Y) ==> |--(ff (pp(A \- B)) --> Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 1250246486460176351
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (tri_sy) (fun (stable_sy) (stable_sy))) -|^) (v (tri_sy) Y)) (v (stable_sy) X))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) -|) (v (loop) B)) (v (loop) A)))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 224490364958511915
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(X --> focg A) /\ |--(focf B --> Y) ==> |--(Y \-^ X --> focg(pp(B \- A)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 224490364958511915
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) A))) (v (tri_sy) X)))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) A)) (v (loop) B))))) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (v (tri_sy) X)) (v (tri_sy) Y)))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 3609443254478389155
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(focf A --> X) /\ |--(focf B --> Y) ==> |--(focf(nn(A ## B)) --> X ##^ Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 3609443254478389155
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (tri_sy) (tri_sy))) +:) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) +.) (v (loop) A)) (v (loop) B)))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 3839687004924032498
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(X --> gg A ##^ gg B) ==> |--(X --> gg(nn(A ## B)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 3839687004924032498
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) A)) (v (loop) B))))) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (v (stable_sy) X)) (v (tri_sy) Y)))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 978480003898022515
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(X --> focg A) /\ |--(focf B --> Y) ==> |--(focf(nn(A \. B)) --> X \.^ Y)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 978480003898022515
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (stable_sy) (fun (tri_sy) (tri_sy))) **|) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) A))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) *|) (v (loop) A)) (v (loop) B)))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 3033866865835735338
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(X --> ff A \.^ gg B) ==> |--(X --> gg(nn(A \. B)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 3033866865835735338
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (a (c (fun (bool) (fun (bool) (bool))) /\\) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) drop3) (v (loop) A))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (v (loop) B))) (v (tri_sy) Y))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) drop2) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) B)) (v (loop) A))))) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (v (tri_sy) Y)) (v (stable_sy) X)))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 282046444875537080
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(X --> focg A) /\ |--(focf B --> Y) ==> |--(focf(nn(B /. A)) --> Y /.^ X)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 282046444875537080
}

theorems {
  conclusion: "(a (a (c (fun (bool) (fun (bool) (bool))) ==>) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (a (c (fun (tri_sy) (fun (stable_sy) (tri_sy))) **:) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) A))) (a (c (fun (loop) (stable_sy)) mark_term) (v (loop) B)))))) (a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (v (stable_sy) X)) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) A)) (v (loop) B)))))))"
  tag: THEOREM
  training_split: TRAINING
  fingerprint: 832385641104863438
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(X --> gg A /.^ ff B) ==> |--(X --> gg (nn(A /. B)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 832385641104863438
}












theorems {
  conclusion: "(a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p))))) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) q)))))) (a (c (fun (loop) (tri_sy)) drop3) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p)))) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) q))))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 2258345092236697046 
  library_tag: "c-fDL.ml"
  pretty_printed: "|-- (((ff ((pp (pAtom p)))) **^ (ff ((pp (pAtom q))))) -->  (focg (pp ((pp (pAtom p)) ** (pp (pAtom q))))))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2258345092236697046
}

theorems {
  conclusion: "(a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p)))) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) q))))))) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) p)))) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) q))))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 2474470904999687504 
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(ff (pp (pp (pAtom p) ** pp (pAtom q))) --> gg (pp (pp (pAtom p) ** pp (pAtom q))))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2474470904999687504
}

theorems {
  conclusion: "(a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (a (c (fun (stable_sy) (fun (stable_sy) (stable_sy))) *:) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) A)))) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) N))))))) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) N)))))) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) A))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 3818568960535754528 
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(ff (nn (pp (pAtom A) /. nn (nAtom N))) **^ ff (nn (nAtom N)) --> gg (pp (pAtom A)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 3818568960535754528
}


theorems {
  conclusion: "(a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) A)))) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) N)))))) (a (c (fun (finite_product) (loop)) plane_norm) (a (c (fun (list (char)) (finite_product)) drop1) (v (list (char)) N))))))) (a (c (fun (loop) (tri_sy)) TAGB) (a (c (fun (cc_v11) (loop)) plane) (a (c (fun (list (char)) (cc_v11)) drop0) (v (list (char)) A))))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 2071674453721820492 
  library_tag: "c-fDL.ml"
  pretty_printed: "|--(ff (pp ((nn ((pp (pAtom A)) /. (nn (nAtom N))) ** (nn (nAtom N))))) --> gg (pp (pAtom A)))"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 2071674453721820492
}


theorems {
  conclusion: "(a (c (fun (scs_v39) (bool)) RC) (a (a (c (fun (stable_sy) (fun (tri_sy) (scs_v39))) <=.) (a (c (fun (loop) (stable_sy)) mark_term) (a (c (fun (cc_v11) (loop)) plane) (a (a (c (fun (loop) (fun (loop) (cc_v11))) *.) (a (c (fun (finite_product) (loop)) plane_norm) (a (a (c (fun (loop) (fun (loop) (finite_product))) **.) (v (loop) X)) (v (loop) Y)))) (v (loop) Y))))) (a (c (fun (loop) (tri_sy)) TAGB) (v (loop) X))))"
  tag: THEOREM
  training_split: VALIDATION
  fingerprint: 3594022267544265710 
  library_tag: "c-fDL.ml"
  pretty_printed: "|-- (ff (pp ((nn (X /. Y)) ** Y)) --> gg X)"
  proof_function: "TAC_PROOF"
  goal_fingerprint: 3594022267544265710
}